{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const animationFrameId = useRef(null); // Animation ID 저장\n  const [startYValues, setStartValues] = useState([]);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const newStartYValues = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      // Draw horizontal line\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      newStartYValues.push(startY);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: Math.round(x1),\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          currentY: 0,\n          direction: 'down',\n          horizontalStepSize: 5,\n          stepSize: 5,\n          horizontalDirection: x2 > x1 ? 'right' : 'left',\n          endY: ladderHeight // 수직선 끝 위치 저장\n        });\n      }\n    }\n    setStartValues(newStartYValues);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      let allPathsCompleted = true;\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          direction,\n          stepSize,\n          horizontalStepSize,\n          horizontalDirection,\n          targetX,\n          endY\n        } = path;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 3;\n        const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\n        const roundedNextY = Math.round(nextY);\n        if (direction === 'down') {\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          path.currentY = Math.min(currentY + stepSize, roundedNextY);\n          ctx.lineTo(currentX, path.currentY);\n          ctx.stroke();\n\n          // 수직 이동에서 수평 이동으로 전환\n          if (path.currentY >= roundedNextY && currentY < endY) {\n            path.direction = 'horizontal';\n            path.currentX = currentX;\n            // 목표 x를 업데이트\n            const currentXIndex = imgPositions.indexOf(currentX);\n            const nextIndex = (currentXIndex + 1) % imgPositions.length;\n            path.targetX = imgPositions[nextIndex];\n            path.horizontalDirection = path.targetX > currentX ? 'right' : 'left';\n          }\n        } else if (direction === 'horizontal') {\n          ctx.lineWidth = 3;\n          ctx.beginPath();\n          ctx.moveTo(currentX, path.currentY);\n          const nextX = currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize);\n          ctx.lineTo(nextX, path.currentY);\n          ctx.stroke();\n          if (horizontalDirection === 'right') {\n            if (currentX < targetX) {\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\n            } else if (currentX >= targetX) {\n              path.direction = 'down';\n              // 다음 수평선을 찾기\n              const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || endY;\n              path.currentY = Math.round(nextY);\n              // 목표 x를 업데이트\n              const currentXIndex = imgPositions.indexOf(path.currentX);\n              const nextIndex = (currentXIndex + 1) % imgPositions.length;\n              path.targetX = imgPositions[nextIndex];\n              path.horizontalDirection = path.targetX > path.currentX ? 'right' : 'left';\n            }\n          } else if (horizontalDirection === 'left') {\n            if (currentX > targetX) {\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\n            } else if (currentX <= targetX) {\n              path.direction = 'down';\n              // 다음 수평선을 찾기\n              const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || endY;\n              path.currentY = Math.round(nextY);\n              // 목표 x를 업데이트\n              const currentXIndex = imgPositions.indexOf(path.currentX);\n              const nextIndex = (currentXIndex - 1 + imgPositions.length) % imgPositions.length;\n              path.targetX = imgPositions[nextIndex];\n              path.horizontalDirection = path.targetX > path.currentX ? 'right' : 'left';\n            }\n          }\n        }\n\n        // 모든 path가 완료되었는지 확인\n        if (path.currentY < endY) {\n          allPathsCompleted = false; // 아직 완료되지 않은 path가 있음\n        }\n      });\n      if (!allPathsCompleted) {\n        // 애니메이션을 계속 진행\n        animationFrameId.current = requestAnimationFrame(animate);\n      } else {\n        // 모든 path가 완료되면 애니메이션을 중단\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n    animationFrameId.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"5fzYn7hkCR2NyzjxZgsLcprD0bk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","animationFrameId","startYValues","setStartValues","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","newStartYValues","i","x1","x2","startY","startX","round","currentX","targetX","y","currentY","direction","horizontalStepSize","stepSize","horizontalDirection","endY","colors","animate","allPathsCompleted","path","strokeStyle","lineWidth","nextY","filter","yVal","sort","a","b","roundedNextY","min","currentXIndex","indexOf","nextIndex","nextX","max","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const animationFrameId = useRef(null);  // Animation ID 저장\r\n  const [startYValues, setStartValues] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const newStartYValues = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n      // Draw horizontal line\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      newStartYValues.push(startY);\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: Math.round(x1),\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          currentY: 0,\r\n          direction: 'down',\r\n          horizontalStepSize: 5,\r\n          stepSize: 5,\r\n          horizontalDirection: x2 > x1 ? 'right' : 'left',\r\n          endY: ladderHeight  // 수직선 끝 위치 저장\r\n        });\r\n      }\r\n    }\r\n    setStartValues(newStartYValues);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs.current]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n      let allPathsCompleted = true;\r\n\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, direction, stepSize, horizontalStepSize, horizontalDirection, targetX, endY } = path;\r\n        \r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 3;\r\n\r\n        const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\r\n        const roundedNextY = Math.round(nextY);\r\n\r\n        if (direction === 'down') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          path.currentY = Math.min(currentY + stepSize, roundedNextY);\r\n\r\n          ctx.lineTo(currentX, path.currentY);\r\n          ctx.stroke();\r\n\r\n          // 수직 이동에서 수평 이동으로 전환\r\n          if (path.currentY >= roundedNextY && currentY < endY) {\r\n            path.direction = 'horizontal';\r\n            path.currentX = currentX;\r\n            // 목표 x를 업데이트\r\n            const currentXIndex = imgPositions.indexOf(currentX);\r\n            const nextIndex = (currentXIndex + 1) % imgPositions.length;\r\n            path.targetX = imgPositions[nextIndex];\r\n            path.horizontalDirection = path.targetX > currentX ? 'right' : 'left';\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          ctx.lineWidth = 3;\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, path.currentY);\r\n          const nextX = currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize);\r\n          ctx.lineTo(nextX, path.currentY);\r\n          ctx.stroke();\r\n\r\n          if (horizontalDirection === 'right') {\r\n            if (currentX < targetX) {\r\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\r\n            } else if (currentX >= targetX) {\r\n              path.direction = 'down';\r\n              // 다음 수평선을 찾기\r\n              const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || endY;\r\n              path.currentY = Math.round(nextY);\r\n              // 목표 x를 업데이트\r\n              const currentXIndex = imgPositions.indexOf(path.currentX);\r\n              const nextIndex = (currentXIndex + 1) % imgPositions.length;\r\n              path.targetX = imgPositions[nextIndex];\r\n              path.horizontalDirection = path.targetX > path.currentX ? 'right' : 'left';\r\n            }\r\n          } else if (horizontalDirection === 'left') {\r\n            if (currentX > targetX) {\r\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\r\n            } else if (currentX <= targetX) {\r\n              path.direction = 'down';\r\n              // 다음 수평선을 찾기\r\n              const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || endY;\r\n              path.currentY = Math.round(nextY);\r\n              // 목표 x를 업데이트\r\n              const currentXIndex = imgPositions.indexOf(path.currentX);\r\n              const nextIndex = (currentXIndex - 1 + imgPositions.length) % imgPositions.length;\r\n              path.targetX = imgPositions[nextIndex];\r\n              path.horizontalDirection = path.targetX > path.currentX ? 'right' : 'left';\r\n            }\r\n          }\r\n        }\r\n\r\n        // 모든 path가 완료되었는지 확인\r\n        if (path.currentY < endY) {\r\n          allPathsCompleted = false;  // 아직 완료되지 않은 path가 있음\r\n        }\r\n      });\r\n\r\n      if (!allPathsCompleted) {\r\n        // 애니메이션을 계속 진행\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n      } else {\r\n        // 모든 path가 완료되면 애니메이션을 중단\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    };\r\n  }, [animatedPaths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;EAC3D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMgB,gBAAgB,GAAGf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAE;EACxC,MAAM,CAACgB,YAAY,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEnDE,SAAS,CAAC,MAAM;IACd,MAAMiB,gBAAgB,GAAGA,CAAA,KAAM;MAC7BR,QAAQ,CAACC,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;IACnC,CAAC;IAEDD,MAAM,CAACQ,gBAAgB,CAAC,QAAQ,EAAED,gBAAgB,CAAC;IACnDA,gBAAgB,CAAC,CAAC;IAClB,OAAO,MAAMP,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAEF,gBAAgB,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACd,MAAMoB,MAAM,GAAGb,SAAS,CAACc,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,YAAY,GAAG,GAAG;IACxB,MAAMC,OAAO,GAAG,EAAE;IAElBH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEN,MAAM,CAACZ,KAAK,EAAEY,MAAM,CAACO,MAAM,CAAC;IAChD,MAAMC,YAAY,GAAG,EAAE;IAEvBxB,IAAI,CAACyB,OAAO,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;MAClC,MAAMC,GAAG,GAAG3B,OAAO,CAACgB,OAAO,CAACU,KAAK,CAAC;MAClC,IAAIC,GAAG,EAAE;QACP,MAAMC,IAAI,GAAGD,GAAG,CAACE,qBAAqB,CAAC,CAAC;QACxC,MAAMC,UAAU,GAAGf,MAAM,CAACc,qBAAqB,CAAC,CAAC;QACjD,MAAME,IAAI,GAAGH,IAAI,CAACI,IAAI,GAAGF,UAAU,CAACE,IAAI,GAAGL,GAAG,CAACxB,KAAK,GAAG,CAAC;QACxDoB,YAAY,CAACU,IAAI,CAACF,IAAI,CAAC;;QAEvB;QACAd,GAAG,CAACiB,SAAS,CAAC,CAAC;QACfjB,GAAG,CAACkB,MAAM,CAACJ,IAAI,EAAE,CAAC,CAAC;QACnBd,GAAG,CAACmB,MAAM,CAACL,IAAI,EAAEZ,YAAY,CAAC;QAC9BF,GAAG,CAACoB,MAAM,CAAC,CAAC;MACd;IACF,CAAC,CAAC;IAEF,MAAMC,kBAAkB,GAAGvC,IAAI,CAACwC,MAAM,GAAG,CAAC;IAC1C,MAAMC,eAAe,GAAGF,kBAAkB,GAAGG,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAEzE,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,eAAe,GAAG,EAAE;IAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,EAAEM,CAAC,EAAE,EAAE;MACxC,MAAMC,EAAE,GAAGxB,YAAY,CAACuB,CAAC,GAAGvB,YAAY,CAACgB,MAAM,CAAC;MAChD,MAAMS,EAAE,GAAGzB,YAAY,CAAC,CAACuB,CAAC,GAAG,CAAC,IAAIvB,YAAY,CAACgB,MAAM,CAAC;MACtD,IAAIU,MAAM,GAAG7B,OAAO,GAAGqB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxB,YAAY;MACnD;MACAF,GAAG,CAACiB,SAAS,CAAC,CAAC;MACfjB,GAAG,CAACkB,MAAM,CAACY,EAAE,EAAEE,MAAM,CAAC;MACtBhC,GAAG,CAACmB,MAAM,CAACY,EAAE,EAAEC,MAAM,CAAC;MACtBhC,GAAG,CAACoB,MAAM,CAAC,CAAC;MACZQ,eAAe,CAACZ,IAAI,CAACgB,MAAM,CAAC;MAE5B,IAAIL,gBAAgB,CAACL,MAAM,GAAGxC,IAAI,CAACwC,MAAM,EAAE;QACzCK,gBAAgB,CAACX,IAAI,CAAC;UACpBiB,MAAM,EAAET,IAAI,CAACU,KAAK,CAACJ,EAAE,CAAC;UACtBK,QAAQ,EAAEX,IAAI,CAACU,KAAK,CAACJ,EAAE,CAAC;UACxBM,OAAO,EAAEZ,IAAI,CAACU,KAAK,CAACH,EAAE,CAAC;UACvBM,CAAC,EAAEb,IAAI,CAACU,KAAK,CAACF,MAAM,CAAC;UACrBM,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE,MAAM;UACjBC,kBAAkB,EAAE,CAAC;UACrBC,QAAQ,EAAE,CAAC;UACXC,mBAAmB,EAAEX,EAAE,GAAGD,EAAE,GAAG,OAAO,GAAG,MAAM;UAC/Ca,IAAI,EAAEzC,YAAY,CAAE;QACtB,CAAC,CAAC;MACJ;IACF;IACAR,cAAc,CAACkC,eAAe,CAAC;IAC/BrC,gBAAgB,CAACoC,gBAAgB,CAAC;EACpC,CAAC,EAAE,CAACzC,KAAK,EAAEJ,IAAI,EAAEC,OAAO,CAACgB,OAAO,CAAC,CAAC;EAElCrB,SAAS,CAAC,MAAM;IACd,MAAMoB,MAAM,GAAGb,SAAS,CAACc,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAM4C,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEzD,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAIC,iBAAiB,GAAG,IAAI;MAE5BxD,aAAa,CAACiB,OAAO,CAAC,CAACwC,IAAI,EAAEtC,KAAK,KAAK;QACrC,MAAM;UAAE0B,QAAQ;UAAEG,QAAQ;UAAEC,SAAS;UAAEE,QAAQ;UAAED,kBAAkB;UAAEE,mBAAmB;UAAEN,OAAO;UAAEO;QAAK,CAAC,GAAGI,IAAI;QAEhH/C,GAAG,CAACgD,WAAW,GAAGJ,MAAM,CAACnC,KAAK,GAAGmC,MAAM,CAACtB,MAAM,CAAC;QAC/CtB,GAAG,CAACiD,SAAS,GAAG,CAAC;QAEjB,MAAMC,KAAK,GAAGzD,YAAY,CAAC0D,MAAM,CAACC,IAAI,IAAIA,IAAI,GAAGd,QAAQ,CAAC,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIZ,IAAI;QAC3F,MAAMa,YAAY,GAAGhC,IAAI,CAACU,KAAK,CAACgB,KAAK,CAAC;QAEtC,IAAIX,SAAS,KAAK,MAAM,EAAE;UACxBvC,GAAG,CAACiB,SAAS,CAAC,CAAC;UACfjB,GAAG,CAACkB,MAAM,CAACiB,QAAQ,EAAEG,QAAQ,CAAC;UAC9BS,IAAI,CAACT,QAAQ,GAAGd,IAAI,CAACiC,GAAG,CAACnB,QAAQ,GAAGG,QAAQ,EAAEe,YAAY,CAAC;UAE3DxD,GAAG,CAACmB,MAAM,CAACgB,QAAQ,EAAEY,IAAI,CAACT,QAAQ,CAAC;UACnCtC,GAAG,CAACoB,MAAM,CAAC,CAAC;;UAEZ;UACA,IAAI2B,IAAI,CAACT,QAAQ,IAAIkB,YAAY,IAAIlB,QAAQ,GAAGK,IAAI,EAAE;YACpDI,IAAI,CAACR,SAAS,GAAG,YAAY;YAC7BQ,IAAI,CAACZ,QAAQ,GAAGA,QAAQ;YACxB;YACA,MAAMuB,aAAa,GAAGpD,YAAY,CAACqD,OAAO,CAACxB,QAAQ,CAAC;YACpD,MAAMyB,SAAS,GAAG,CAACF,aAAa,GAAG,CAAC,IAAIpD,YAAY,CAACgB,MAAM;YAC3DyB,IAAI,CAACX,OAAO,GAAG9B,YAAY,CAACsD,SAAS,CAAC;YACtCb,IAAI,CAACL,mBAAmB,GAAGK,IAAI,CAACX,OAAO,GAAGD,QAAQ,GAAG,OAAO,GAAG,MAAM;UACvE;QACF,CAAC,MAAM,IAAII,SAAS,KAAK,YAAY,EAAE;UACrCvC,GAAG,CAACiD,SAAS,GAAG,CAAC;UACjBjD,GAAG,CAACiB,SAAS,CAAC,CAAC;UACfjB,GAAG,CAACkB,MAAM,CAACiB,QAAQ,EAAEY,IAAI,CAACT,QAAQ,CAAC;UACnC,MAAMuB,KAAK,GAAG1B,QAAQ,IAAIO,mBAAmB,KAAK,OAAO,GAAGF,kBAAkB,GAAG,CAACA,kBAAkB,CAAC;UACrGxC,GAAG,CAACmB,MAAM,CAAC0C,KAAK,EAAEd,IAAI,CAACT,QAAQ,CAAC;UAChCtC,GAAG,CAACoB,MAAM,CAAC,CAAC;UAEZ,IAAIsB,mBAAmB,KAAK,OAAO,EAAE;YACnC,IAAIP,QAAQ,GAAGC,OAAO,EAAE;cACtBW,IAAI,CAACZ,QAAQ,GAAGX,IAAI,CAACiC,GAAG,CAACtB,QAAQ,GAAGK,kBAAkB,EAAEJ,OAAO,CAAC;YAClE,CAAC,MAAM,IAAID,QAAQ,IAAIC,OAAO,EAAE;cAC9BW,IAAI,CAACR,SAAS,GAAG,MAAM;cACvB;cACA,MAAMW,KAAK,GAAGzD,YAAY,CAAC0D,MAAM,CAACC,IAAI,IAAIA,IAAI,GAAGL,IAAI,CAACT,QAAQ,CAAC,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIZ,IAAI;cAChGI,IAAI,CAACT,QAAQ,GAAGd,IAAI,CAACU,KAAK,CAACgB,KAAK,CAAC;cACjC;cACA,MAAMQ,aAAa,GAAGpD,YAAY,CAACqD,OAAO,CAACZ,IAAI,CAACZ,QAAQ,CAAC;cACzD,MAAMyB,SAAS,GAAG,CAACF,aAAa,GAAG,CAAC,IAAIpD,YAAY,CAACgB,MAAM;cAC3DyB,IAAI,CAACX,OAAO,GAAG9B,YAAY,CAACsD,SAAS,CAAC;cACtCb,IAAI,CAACL,mBAAmB,GAAGK,IAAI,CAACX,OAAO,GAAGW,IAAI,CAACZ,QAAQ,GAAG,OAAO,GAAG,MAAM;YAC5E;UACF,CAAC,MAAM,IAAIO,mBAAmB,KAAK,MAAM,EAAE;YACzC,IAAIP,QAAQ,GAAGC,OAAO,EAAE;cACtBW,IAAI,CAACZ,QAAQ,GAAGX,IAAI,CAACsC,GAAG,CAAC3B,QAAQ,GAAGK,kBAAkB,EAAEJ,OAAO,CAAC;YAClE,CAAC,MAAM,IAAID,QAAQ,IAAIC,OAAO,EAAE;cAC9BW,IAAI,CAACR,SAAS,GAAG,MAAM;cACvB;cACA,MAAMW,KAAK,GAAGzD,YAAY,CAAC0D,MAAM,CAACC,IAAI,IAAIA,IAAI,GAAGL,IAAI,CAACT,QAAQ,CAAC,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIZ,IAAI;cAChGI,IAAI,CAACT,QAAQ,GAAGd,IAAI,CAACU,KAAK,CAACgB,KAAK,CAAC;cACjC;cACA,MAAMQ,aAAa,GAAGpD,YAAY,CAACqD,OAAO,CAACZ,IAAI,CAACZ,QAAQ,CAAC;cACzD,MAAMyB,SAAS,GAAG,CAACF,aAAa,GAAG,CAAC,GAAGpD,YAAY,CAACgB,MAAM,IAAIhB,YAAY,CAACgB,MAAM;cACjFyB,IAAI,CAACX,OAAO,GAAG9B,YAAY,CAACsD,SAAS,CAAC;cACtCb,IAAI,CAACL,mBAAmB,GAAGK,IAAI,CAACX,OAAO,GAAGW,IAAI,CAACZ,QAAQ,GAAG,OAAO,GAAG,MAAM;YAC5E;UACF;QACF;;QAEA;QACA,IAAIY,IAAI,CAACT,QAAQ,GAAGK,IAAI,EAAE;UACxBG,iBAAiB,GAAG,KAAK,CAAC,CAAE;QAC9B;MACF,CAAC,CAAC;MAEF,IAAI,CAACA,iBAAiB,EAAE;QACtB;QACAtD,gBAAgB,CAACO,OAAO,GAAGgE,qBAAqB,CAAClB,OAAO,CAAC;MAC3D,CAAC,MAAM;QACL;QACAmB,oBAAoB,CAACxE,gBAAgB,CAACO,OAAO,CAAC;MAChD;IACF,CAAC;IACDP,gBAAgB,CAACO,OAAO,GAAGgE,qBAAqB,CAAClB,OAAO,CAAC;IAEzD,OAAO,MAAM;MACXmB,oBAAoB,CAACxE,gBAAgB,CAACO,OAAO,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACT,aAAa,CAAC,CAAC;EAEnB,oBACEV,OAAA;IACEqF,GAAG,EAAEhF,SAAU;IACfC,KAAK,EAAEA,KAAM;IACbmB,MAAM,EAAE;EAAI;IAAA6D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN,CAAC;AAACrF,EAAA,CA5LIH,MAAM;AAAAyF,EAAA,GAANzF,MAAM;AA8LZ,eAAeA,MAAM;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}