{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const animationFrameIdRef = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // 수직선 그리기\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // 수평선 그리기\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      console.log(x1);\n      console.log(x2);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: Math.round(x1),\n          currentY: 0,\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          direction: 'down',\n          // 수직 이동 시작\n          horizontalStepSize: 0.05,\n          stepSize: 2 // 애니메이션 속도\n        });\n      }\n    }\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n\n    // 애니메이션 지속 시간 (5초)\n    const duration = 5000;\n\n    // 수직 애니메이션 설정\n    const verticalAnimationInterval = setInterval(() => {\n      animatedPaths.forEach((path, index) => {\n        const {\n          startX,\n          currentY,\n          y,\n          direction\n        } = path;\n        if (direction === 'down') {\n          ctx.strokeStyle = colors[index % colors.length];\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, 0);\n          ctx.lineTo(startX, currentY);\n          ctx.stroke();\n          const verticalDistance = y;\n          const verticalStepSize = verticalDistance / (duration / 16);\n          if (currentY < y) {\n            path.currentY = Math.min(currentY + verticalStepSize, y);\n          } else if (currentY === y) {\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\n            path.currentX = startX; // 현재 위치를 수평 이동의 시작 위치로 설정\n          }\n        }\n      });\n    }, 16); // 16ms마다 수직 애니메이션 업데이트\n\n    // 수평 애니메이션 설정\n    const horizontalAnimationInterval = setInterval(() => {\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          targetX,\n          y,\n          direction\n        } = path;\n        if (direction === 'horizontal') {\n          ctx.strokeStyle = colors[index % colors.length];\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(currentX, y);\n          ctx.lineTo(currentX + 1, y);\n          ctx.stroke();\n          const horizontalDistance = Math.abs(targetX - path.currentX);\n          const horizontalStepSize = horizontalDistance / (duration / 16);\n          if (currentX < targetX) {\n            path.currentX = Math.min(currentX + horizontalStepSize, targetX);\n          } else if (currentX >= targetX) {\n            path.currentX = targetX; // 목표 위치에 도달하면 위치 고정\n            path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\n          }\n        }\n      });\n    }, 16); // 16ms마다 수평 애니메이션 업데이트\n\n    return () => {\n      clearInterval(verticalAnimationInterval);\n      clearInterval(horizontalAnimationInterval); // 수평 애니메이션 종료\n    };\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"Iq3hgMrELjTqJZEq3obAEDE8kDI=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","animationFrameIdRef","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","i","x1","x2","startY","console","log","startX","round","currentY","targetX","y","direction","horizontalStepSize","stepSize","colors","duration","verticalAnimationInterval","setInterval","path","strokeStyle","lineWidth","verticalDistance","verticalStepSize","min","currentX","horizontalAnimationInterval","horizontalDistance","abs","clearInterval","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const animationFrameIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // 수직선 그리기\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      // 수평선 그리기\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      console.log(x1)\r\n      console.log(x2)\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: Math.round(x1),\r\n          currentY: 0,\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          direction: 'down', // 수직 이동 시작\r\n          horizontalStepSize:0.05,\r\n          stepSize: 2 ,// 애니메이션 속도\r\n        \r\n        });\r\n      }\r\n    }\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n  \r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n  \r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n  \r\n    // 애니메이션 지속 시간 (5초)\r\n    const duration = 5000;\r\n  \r\n    // 수직 애니메이션 설정\r\n    const verticalAnimationInterval = setInterval(() => {\r\n      animatedPaths.forEach((path, index) => {\r\n        const { startX, currentY, y, direction } = path;\r\n  \r\n        if (direction === 'down') {\r\n          ctx.strokeStyle = colors[index % colors.length];\r\n          ctx.lineWidth = 2;\r\n  \r\n          ctx.beginPath();\r\n          ctx.moveTo(startX, 0);\r\n          ctx.lineTo(startX, currentY);\r\n          ctx.stroke();\r\n  \r\n          const verticalDistance = y;\r\n          const verticalStepSize = verticalDistance / (duration / 16);\r\n  \r\n          if (currentY < y) {\r\n            path.currentY = Math.min(currentY + verticalStepSize, y);\r\n          } else if (currentY === y) {\r\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\r\n            path.currentX = startX; // 현재 위치를 수평 이동의 시작 위치로 설정\r\n          }\r\n        }\r\n      });\r\n    }, 16); // 16ms마다 수직 애니메이션 업데이트\r\n  \r\n    // 수평 애니메이션 설정\r\n    const horizontalAnimationInterval = setInterval(() => {\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, targetX, y, direction } = path;\r\n  \r\n        if (direction === 'horizontal') {\r\n          ctx.strokeStyle = colors[index % colors.length];\r\n          ctx.lineWidth = 2;\r\n  \r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, y);\r\n          ctx.lineTo(currentX + 1, y);\r\n          ctx.stroke();\r\n  \r\n          const horizontalDistance = Math.abs(targetX - path.currentX);\r\n          const horizontalStepSize = horizontalDistance / (duration / 16);\r\n  \r\n          if (currentX < targetX) {\r\n            path.currentX = Math.min(currentX + horizontalStepSize, targetX);\r\n          } else if (currentX >= targetX) {\r\n            path.currentX = targetX; // 목표 위치에 도달하면 위치 고정\r\n            path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\r\n          }\r\n        }\r\n      });\r\n    }, 16); // 16ms마다 수평 애니메이션 업데이트\r\n  \r\n    return () => {\r\n      clearInterval(verticalAnimationInterval);\r\n      clearInterval(horizontalAnimationInterval); // 수평 애니메이션 종료\r\n    };\r\n  }, [animatedPaths]);\r\n  \r\n \r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}