{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    const imgPositions = [];\n\n    // 초기 선 그리기\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // 수직선 그리기\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // 수평선 그리기\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: Math.round(x1),\n          currentX: Math.round(x1),\n          // 초기값 설정\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          nextY: i < horizontalLines - 1 ? Math.round(ladderY + Math.random() * ladderHeight) : null,\n          currentY: 0,\n          direction: 'down',\n          // 수직 이동 시작\n          horizontalStepSize: 5,\n          // 일정한 수평 애니메이션 속도\n          stepSize: 5,\n          // 수직 애니메이션 속도\n          horizontalDirection: x2 > x1 ? 'right' : 'left'\n        });\n      }\n    }\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    let animationFrameId;\n    const animate = () => {\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          y,\n          direction,\n          stepSize,\n          horizontalDirection,\n          targetX,\n          horizontalStepSize,\n          nextY\n        } = path;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 2;\n        if (direction === 'down') {\n          // 현재 위치에서 다음 y 위치까지 수직선 그리기\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          ctx.lineTo(currentX, Math.min(currentY + stepSize, nextY !== null ? nextY : ladderHeight)); // currentY에서 다음 y까지 선을 그립니다.\n          ctx.stroke();\n          if (currentY < (nextY !== null ? nextY : ladderHeight)) {\n            path.currentY = Math.min(currentY + stepSize, nextY !== null ? nextY : ladderHeight);\n          } else if (currentY === (nextY !== null ? nextY : ladderHeight)) {\n            path.currentY = nextY !== null ? nextY : ladderHeight;\n            if (nextY !== null) {\n              path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\n              path.currentX = currentX; // 현재 위치를 수평 이동의 시작 위치로 설정\n            } else {\n              path.direction = 'down'; // 수평선이 없으면 계속 수직으로 이동\n              path.currentX = currentX; // 계속 수직 이동 중\n            }\n          }\n        } else if (direction === 'horizontal') {\n          ctx.beginPath();\n          ctx.moveTo(currentX, y);\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize), y);\n          ctx.stroke();\n          if (horizontalDirection === 'right') {\n            if (currentX < targetX) {\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\n            } else if (currentX >= targetX) {\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\n              path.currentY = y; // 수평 이동 후 수직 이동 준비\n              path.nextY = null; // 다음 수평선이 없으므로 null로 설정\n            }\n          } else if (horizontalDirection === 'left') {\n            if (currentX > targetX) {\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\n            } else if (currentX <= targetX) {\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\n              path.currentY = y; // 수평 이동 후 수직 이동 준비\n              path.nextY = null; // 다음 수평선이 없으므로 null로 설정\n            }\n          }\n        }\n      });\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"YIp0a0fTZDOz1AsfYdVwyc1BMCU=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","i","x1","x2","startY","startX","round","currentX","targetX","y","nextY","currentY","direction","horizontalStepSize","stepSize","horizontalDirection","colors","animationFrameId","animate","path","strokeStyle","lineWidth","min","max","requestAnimationFrame","cancelAnimationFrame","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    const imgPositions = [];\r\n\r\n    // 초기 선 그리기\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // 수직선 그리기\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      // 수평선 그리기\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      \r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: Math.round(x1),\r\n          currentX: Math.round(x1), // 초기값 설정\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          nextY: i < horizontalLines - 1 ? Math.round(ladderY + Math.random() * ladderHeight) : null,\r\n          currentY: 0,\r\n          direction: 'down', // 수직 이동 시작\r\n          horizontalStepSize: 5, // 일정한 수평 애니메이션 속도\r\n          stepSize: 5, // 수직 애니메이션 속도\r\n          horizontalDirection: x2 > x1 ? 'right' : 'left'\r\n        });\r\n      }\r\n    }\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n    let animationFrameId;\r\n\r\n    const animate = () => {\r\n      \r\n\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, y, direction, stepSize, horizontalDirection, targetX, horizontalStepSize, nextY } = path;\r\n\r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 2;\r\n\r\n        if (direction === 'down') {\r\n          // 현재 위치에서 다음 y 위치까지 수직선 그리기\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          ctx.lineTo(currentX, Math.min(currentY + stepSize, nextY !== null ? nextY : ladderHeight)); // currentY에서 다음 y까지 선을 그립니다.\r\n          ctx.stroke();\r\n\r\n          if (currentY < (nextY !== null ? nextY : ladderHeight)) {\r\n            path.currentY = Math.min(currentY + stepSize, nextY !== null ? nextY : ladderHeight);\r\n          } else if (currentY === (nextY !== null ? nextY : ladderHeight)) {\r\n            path.currentY = nextY !== null ? nextY : ladderHeight;\r\n\r\n            if (nextY !== null) {\r\n              path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\r\n              path.currentX = currentX; // 현재 위치를 수평 이동의 시작 위치로 설정\r\n            } else {\r\n              path.direction = 'down'; // 수평선이 없으면 계속 수직으로 이동\r\n              path.currentX = currentX; // 계속 수직 이동 중\r\n            }\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, y);\r\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize), y);\r\n          ctx.stroke();\r\n\r\n          if (horizontalDirection === 'right') {\r\n            if (currentX < targetX) {\r\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\r\n            } else if (currentX >= targetX) {\r\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\r\n              path.currentY = y; // 수평 이동 후 수직 이동 준비\r\n              path.nextY = null; // 다음 수평선이 없으므로 null로 설정\r\n            }\r\n          } else if (horizontalDirection === 'left') {\r\n            if (currentX > targetX) {\r\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\r\n            } else if (currentX <= targetX) {\r\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\r\n              path.currentY = y; // 수평 이동 후 수직 이동 준비\r\n              path.nextY = null; // 다음 수평선이 없으므로 null로 설정\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [animatedPaths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}