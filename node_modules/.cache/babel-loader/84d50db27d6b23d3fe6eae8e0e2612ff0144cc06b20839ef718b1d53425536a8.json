{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Memo\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setMemo } from \"../redux/actions/memoAction\"; // 액션 생성자\nimport { Routes, Route } from 'react-router-dom';\nimport MemoList from './MemoList';\nimport MemoInput from './MemoInput';\nimport * as S from './style';\nimport DataInput from './DataInput';\nimport { setLoading } from '../redux/actions/UserAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Memo() {\n  _s();\n  const navigate = useNavigate();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [textValue, setTextValue] = useState(\"\");\n  const {\n    isLoading,\n    login\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const memos = useSelector(state => state.memo.memo) || [];\n  console.log(isLoading);\n  // 메모 상태 업데이트 함수\n  const updateMemos = newMemos => {\n    dispatch(setMemo(newMemos));\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleTextChange = e => {\n    setTextValue(e.target.value);\n  };\n  const handleCheckboxChange = index => {\n    const updatedMemos = memos.map((memo, i) => i === index ? {\n      ...memo,\n      checked: !memo.checked\n    } : memo);\n    updateMemos(updatedMemos);\n  };\n  const uploadMemo = async () => {\n    if (inputValue && textValue) {\n      const memoTime = new Date().toLocaleString();\n      const newMemo = {\n        title: inputValue,\n        content: textValue,\n        name: textValue,\n        created_at: memoTime\n      };\n      console.log('Sending data:', JSON.stringify(newMemo));\n      try {\n        const response = await fetch('http://localhost:5000/api/notes', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newMemo)\n        });\n        const responseData = await response.json();\n        console.log('Response data:', responseData);\n        if (response.ok) {\n          setInputValue('');\n          setTextValue('');\n          navigate('/memo');\n          updateMemos([...memos, responseData]);\n        } else {\n          console.error('Failed to upload memo:', responseData.message);\n          alert(responseData.message);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else {\n      console.log('err');\n    }\n  };\n  const deleteMemos = async () => {\n    if (login === true) {\n      const idsToDelete = memos.filter(memo => memo.checked).map(memo => memo.id);\n      for (const id of idsToDelete) {\n        try {\n          const response = await fetch(`http://localhost:5000/api/notes/${id}`, {\n            method: 'DELETE'\n          });\n          if (response.ok) {\n            console.log(`Deleted memo with id ${id}`);\n          } else {\n            console.error(`Failed to delete memo with id ${id}`);\n          }\n        } catch (error) {\n          console.error('Error:', error);\n        }\n      }\n      updateMemos(memos.filter(memo => !memo.checked));\n    } else {\n      alert('로그인 하십시오');\n      navigate('/login');\n    }\n  };\n  useEffect(() => {\n    dispatch(setLoading(true));\n    const fetchMemos = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/notes');\n        const data = await response.json();\n        dispatch(setMemo(data));\n        console.log(isLoading);\n      } catch (error) {\n        console.error('Error fetching memos:', error);\n      } finally {\n        dispatch(setLoading(false));\n      }\n    };\n    fetchMemos();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(S.Components, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(MemoList, {\n            memos: memos,\n            deleteMemos: deleteMemos,\n            handleCheckboxChange: handleCheckboxChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/input\",\n          element: /*#__PURE__*/_jsxDEV(MemoInput, {\n            uploadMemo: uploadMemo,\n            inputValue: inputValue,\n            textValue: textValue,\n            handleInputChange: handleInputChange,\n            handleTextChange: handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 18\n        }, this), memos.map((memo, index) => /*#__PURE__*/_jsxDEV(Route, {\n          path: `/${memo.title}`,\n          element: /*#__PURE__*/_jsxDEV(DataInput, {\n            memos: memos,\n            title: memo.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 38\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(Memo, \"D59hB4ImsXICYT8jXEY2E1XJd04=\", false, function () {\n  return [useNavigate, useSelector, useDispatch, useSelector];\n});\n_c = Memo;\nexport default Memo;\nvar _c;\n$RefreshReg$(_c, \"Memo\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","setMemo","Routes","Route","MemoList","MemoInput","S","DataInput","setLoading","jsxDEV","_jsxDEV","Memo","_s","navigate","inputValue","setInputValue","textValue","setTextValue","isLoading","login","state","user","dispatch","memos","memo","console","log","updateMemos","newMemos","handleInputChange","e","target","value","handleTextChange","handleCheckboxChange","index","updatedMemos","map","i","checked","uploadMemo","memoTime","Date","toLocaleString","newMemo","title","content","name","created_at","JSON","stringify","response","fetch","method","headers","body","responseData","json","ok","error","message","alert","deleteMemos","idsToDelete","filter","id","fetchMemos","data","Components","children","className","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Memo/index.js"],"sourcesContent":["import React, { useState ,useEffect,} from 'react';\r\nimport {  useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setMemo } from \"../redux/actions/memoAction\"; // 액션 생성자\r\nimport { Routes, Route} from 'react-router-dom';\r\nimport MemoList from './MemoList';\r\nimport MemoInput from './MemoInput';\r\nimport * as S from './style';\r\nimport DataInput from './DataInput';\r\nimport { setLoading } from '../redux/actions/UserAction';\r\n\r\nfunction Memo() {\r\n    const navigate = useNavigate();\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [textValue, setTextValue] = useState(\"\");\r\n    const { isLoading,login} = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const memos = useSelector(state => state.memo.memo) || [];\r\n\r\n    console.log(isLoading)\r\n    // 메모 상태 업데이트 함수\r\n    const updateMemos = (newMemos) => {\r\n        dispatch(setMemo(newMemos));\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);  \r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        setTextValue(e.target.value);  \r\n    };\r\n\r\n    const handleCheckboxChange = (index) => {\r\n        const updatedMemos = memos.map((memo, i) =>\r\n            i === index ? { ...memo, checked: !memo.checked } : memo\r\n        );\r\n        updateMemos(updatedMemos);\r\n       \r\n    };\r\n   \r\n    const uploadMemo = async () => {\r\n        if (inputValue && textValue) {\r\n            const memoTime = new Date().toLocaleString();\r\n            const newMemo = { title: inputValue, content: textValue, name: textValue, created_at: memoTime };\r\n           \r\n            console.log('Sending data:', JSON.stringify(newMemo));\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/notes', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(newMemo),\r\n                });\r\n    \r\n                const responseData = await response.json();\r\n                console.log('Response data:', responseData);\r\n    \r\n                if (response.ok) {\r\n                    setInputValue('');\r\n                    setTextValue('');\r\n                    navigate('/memo');\r\n                    \r\n                    updateMemos([...memos, responseData]);\r\n                } else {\r\n                    console.error('Failed to upload memo:', responseData.message);\r\n                    alert(responseData.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        } else {\r\n            console.log('err');\r\n        }\r\n    };\r\n    \r\n    const deleteMemos = async () => {\r\n        if(login === true){\r\n        const idsToDelete = memos.filter(memo => memo.checked).map(memo => memo.id);\r\n\r\n        for (const id of idsToDelete) {\r\n            try {\r\n                const response = await fetch(`http://localhost:5000/api/notes/${id}`, {\r\n                    method: 'DELETE',\r\n                });\r\n\r\n                if (response.ok) {\r\n                    console.log(`Deleted memo with id ${id}`);\r\n                } else {\r\n                    console.error(`Failed to delete memo with id ${id}`);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n        }\r\n        updateMemos(memos.filter(memo => !memo.checked));\r\n    }else{\r\n        alert('로그인 하십시오')\r\n        navigate('/login')\r\n    }\r\n\r\n       \r\n    };\r\n    \r\n\r\n    \r\n    useEffect(() => {\r\n        dispatch(setLoading(true));\r\n        const fetchMemos = async () => {\r\n          try {\r\n            const response = await fetch('http://localhost:5000/api/notes');\r\n            const data = await response.json();\r\n            dispatch(setMemo(data));\r\n            \r\n            console.log(isLoading)\r\n          } catch (error) {\r\n            console.error('Error fetching memos:', error);\r\n          }finally{\r\n            dispatch(setLoading(false));\r\n          }\r\n        };\r\n    \r\n        fetchMemos();\r\n      }, [dispatch]);\r\n      \r\n      \r\n    return (\r\n        <S.Components>\r\n            <div className='background'>\r\n                <Routes>\r\n                    <Route path='/' element={<MemoList memos={memos} deleteMemos={deleteMemos} handleCheckboxChange={handleCheckboxChange} \r\n                 \r\n                    />}/>\r\n                 <Route path='/input' element={<MemoInput\r\n                 uploadMemo={uploadMemo}\r\n                 inputValue={inputValue}\r\n                 textValue={textValue}\r\n                 handleInputChange={handleInputChange}\r\n                 handleTextChange={handleTextChange}\r\n                 />}/>\r\n                   {memos.map((memo, index) => (\r\n                        <Route \r\n                            key={index} \r\n                            path={`/${memo.title}`} \r\n                            element={<DataInput memos={memos}  title={memo.title}/>} \r\n                        />\r\n                    ))}\r\n                </Routes>\r\n               \r\n                </div>\r\n        </S.Components>\r\n    );\r\n}\r\n\r\nexport default Memo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}