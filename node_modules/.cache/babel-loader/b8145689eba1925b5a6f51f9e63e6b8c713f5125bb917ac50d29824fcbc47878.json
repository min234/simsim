{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const animationFrameIdRef = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n\n    // 이미지 위치 계산 및 수직선, 수평선 그리기\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: Math.round(x1),\n          currentY: 0,\n          targetY: Math.round(startY),\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          direction: 'down',\n          // 수직 이동 시작\n          horizontalDirection: Math.random() > 0.5 ? 'right' : 'left',\n          stepSize: 2 // 애니메이션 속도\n        });\n      }\n    }\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const duration = 5000; // 애니메이션 지속 시간 (5초)\n\n    const verticalAnimationInterval = setInterval(() => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          targetY,\n          direction,\n          stepSize\n        } = path;\n        if (direction === 'down') {\n          ctx.strokeStyle = colors[index % colors.length];\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(currentX, 0);\n          ctx.lineTo(currentX, currentY);\n          ctx.stroke();\n          if (currentY < targetY) {\n            path.currentY = Math.min(currentY + stepSize, targetY);\n          } else if (currentY >= targetY) {\n            path.currentY = targetY;\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\n          }\n        }\n      });\n    }, 16);\n    const horizontalAnimationInterval = setInterval(() => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          targetX,\n          currentY,\n          direction,\n          horizontalDirection,\n          stepSize\n        } = path;\n        if (direction === 'horizontal') {\n          ctx.strokeStyle = colors[index % colors.length];\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? 1 : -1), currentY);\n          ctx.stroke();\n          if (horizontalDirection === 'right') {\n            if (currentX < targetX) {\n              path.currentX = Math.min(currentX + stepSize, targetX);\n            } else if (currentX >= targetX) {\n              path.currentX = targetX;\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\n            }\n          } else if (horizontalDirection === 'left') {\n            if (currentX > targetX) {\n              path.currentX = Math.max(currentX - stepSize, targetX);\n            } else if (currentX <= targetX) {\n              path.currentX = targetX;\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\n            }\n          }\n        }\n      });\n    }, 16);\n    return () => {\n      clearInterval(verticalAnimationInterval);\n      clearInterval(horizontalAnimationInterval);\n    };\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"Iq3hgMrELjTqJZEq3obAEDE8kDI=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","animationFrameIdRef","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","i","x1","x2","startY","startX","round","currentY","targetY","currentX","targetX","direction","horizontalDirection","stepSize","colors","duration","verticalAnimationInterval","setInterval","path","strokeStyle","lineWidth","min","horizontalAnimationInterval","max","clearInterval","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const animationFrameIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    // 이미지 위치 계산 및 수직선, 수평선 그리기\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: Math.round(x1),\r\n          currentY: 0,\r\n          targetY: Math.round(startY),\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          direction: 'down', // 수직 이동 시작\r\n          horizontalDirection: Math.random() > 0.5 ? 'right' : 'left',\r\n          stepSize: 2, // 애니메이션 속도\r\n        });\r\n      }\r\n    }\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n    const duration = 5000; // 애니메이션 지속 시간 (5초)\r\n\r\n    const verticalAnimationInterval = setInterval(() => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, targetY, direction, stepSize } = path;\r\n\r\n        if (direction === 'down') {\r\n          ctx.strokeStyle = colors[index % colors.length];\r\n          ctx.lineWidth = 2;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, 0);\r\n          ctx.lineTo(currentX, currentY);\r\n          ctx.stroke();\r\n\r\n          if (currentY < targetY) {\r\n            path.currentY = Math.min(currentY + stepSize, targetY);\r\n          } else if (currentY >= targetY) {\r\n            path.currentY = targetY;\r\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\r\n          }\r\n        }\r\n      });\r\n    }, 16);\r\n\r\n    const horizontalAnimationInterval = setInterval(() => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, targetX, currentY, direction, horizontalDirection, stepSize } = path;\r\n\r\n        if (direction === 'horizontal') {\r\n          ctx.strokeStyle = colors[index % colors.length];\r\n          ctx.lineWidth = 2;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? 1 : -1), currentY);\r\n          ctx.stroke();\r\n\r\n          if (horizontalDirection === 'right') {\r\n            if (currentX < targetX) {\r\n              path.currentX = Math.min(currentX + stepSize, targetX);\r\n            } else if (currentX >= targetX) {\r\n              path.currentX = targetX;\r\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\r\n            }\r\n          } else if (horizontalDirection === 'left') {\r\n            if (currentX > targetX) {\r\n              path.currentX = Math.max(currentX - stepSize, targetX);\r\n            } else if (currentX <= targetX) {\r\n              path.currentX = targetX;\r\n              path.direction = 'down'; // 수평 이동 완료 후 다시 수직 이동\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, 16);\r\n\r\n    return () => {\r\n      clearInterval(verticalAnimationInterval);\r\n      clearInterval(horizontalAnimationInterval);\r\n    };\r\n  }, [animatedPaths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}