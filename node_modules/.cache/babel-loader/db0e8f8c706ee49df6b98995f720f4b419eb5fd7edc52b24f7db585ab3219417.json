{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [paths, setPaths] = useState([]);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const [animationFrameId, setAnimationFrameId] = useState(null);\n  console.log(animationFrameId);\n  // 화면 크기 변경 시 캔버스 크기 업데이트\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n\n  // 수직선 및 수평선 그리기\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 수직선 그리기\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n\n    // 수평선 그리기\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newPaths = Array.from({\n      length: data.length\n    }, () => []);\n    const newAnimatedPaths = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      newPaths[imgPositions.indexOf(x1)].push({\n        coord: {\n          startX: x1,\n          endX: x2,\n          y: startY\n        },\n        connectedIndex: {\n          vertical: imgPositions.indexOf(x2)\n        }\n      });\n\n      // 애니메이션 경로 초기화\n      newAnimatedPaths.push({\n        coord: {\n          startX: x1,\n          endX: x2,\n          y: startY\n        },\n        currentX: x1,\n        animationProgress: 0\n      });\n    }\n    setPaths(newPaths);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n\n  // 애니메이션을 위한 useEffect\n  // useEffect(() => {\n  //   const animate = () => {\n  //     const canvas = canvasRef.current;\n  //     if (!canvas) return;\n\n  //     const ctx = canvas.getContext(\"2d\");\n  //     if (!ctx) return;\n\n  //     // 기본 경로 그리기\n  //     ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  //     const ladderHeight = 600;\n  //     const ladderY = 50;\n\n  //     // 수직선 그리기\n  //     const imgPositions = [];\n  //     data.forEach((playerData, index) => {\n  //       const img = imgRefs.current[index];\n  //       if (img) {\n  //         const rect = img.getBoundingClientRect();\n  //         const canvasRect = canvas.getBoundingClientRect();\n  //         const imgX = rect.left - canvasRect.left + img.width / 2;\n  //         imgPositions.push(imgX);\n  //         ctx.beginPath();\n  //         ctx.moveTo(imgX, 0);\n  //         ctx.lineTo(imgX, ladderHeight);\n  //         ctx.stroke();\n  //       }\n  //     });\n\n  //     // 수평선 그리기\n  //     ctx.strokeStyle = 'black'; // 기본 경로 색상\n  //     paths.forEach((pathArray) => {\n  //       pathArray.forEach((path) => {\n  //         const { startX, endX, y } = path.coord;\n  //         ctx.beginPath();\n  //         ctx.moveTo(startX, y);\n  //         ctx.lineTo(endX, y);\n  //         ctx.stroke();\n  //       });\n  //     });\n\n  //     // 애니메이션 경로 그리기\n  //     ctx.strokeStyle = 'red'; // 애니메이션 경로 색상\n  //     const updatedAnimatedPaths = animatedPaths.map((path) => {\n  //       const { coord, currentX } = path;\n  //       const animationSpeed = 2; // 애니메이션 속도 조절\n  //       const newX = currentX + animationSpeed;\n  //       const { endX, y } = coord;\n\n  //       if (newX > endX) {\n  //         return { ...path, currentX: endX, animationProgress: 1 }; // 애니메이션 완료\n  //       }\n\n  //       ctx.beginPath();\n  //       ctx.moveTo(currentX, y);\n  //       ctx.lineTo(newX, y);\n  //       ctx.stroke();\n\n  //       return {\n  //         ...path,\n  //         currentX: newX\n  //       };\n  //     });\n\n  //     setAnimatedPaths(updatedAnimatedPaths);\n\n  //     // 애니메이션 계속\n  //     setAnimationFrameId(requestAnimationFrame(animate));\n  //   };\n\n  //   animate();\n\n  //   return () => {\n  //     if (animationFrameId ) {\n  //       cancelAnimationFrame(animationFrameId);\n  //     }\n  //   };\n  // }, [paths, animatedPaths, animationFrameId]);\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"avJ3iVL4SL3qOs9Vuc35mGkPmaw=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","paths","setPaths","animatedPaths","setAnimatedPaths","animationFrameId","setAnimationFrameId","console","log","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newPaths","Array","from","newAnimatedPaths","i","x1","x2","startY","indexOf","coord","startX","endX","y","connectedIndex","vertical","currentX","animationProgress","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [paths, setPaths] = useState([]);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const [animationFrameId, setAnimationFrameId] = useState(null);\r\n  console.log(animationFrameId)\r\n  // 화면 크기 변경 시 캔버스 크기 업데이트\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  // 수직선 및 수평선 그리기\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // 수직선 그리기\r\n    const imgPositions = [];\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    // 수평선 그리기\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newPaths = Array.from({ length: data.length }, () => []);\r\n    const newAnimatedPaths = [];\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      newPaths[imgPositions.indexOf(x1)].push({\r\n        coord: { startX: x1, endX: x2, y: startY },\r\n        connectedIndex: { vertical: imgPositions.indexOf(x2) }\r\n      });\r\n\r\n      // 애니메이션 경로 초기화\r\n      newAnimatedPaths.push({\r\n        coord: { startX: x1, endX: x2, y: startY },\r\n        currentX: x1,\r\n        animationProgress: 0\r\n      });\r\n    }\r\n\r\n    setPaths(newPaths);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs]);\r\n\r\n  // 애니메이션을 위한 useEffect\r\n  // useEffect(() => {\r\n  //   const animate = () => {\r\n  //     const canvas = canvasRef.current;\r\n  //     if (!canvas) return;\r\n\r\n  //     const ctx = canvas.getContext(\"2d\");\r\n  //     if (!ctx) return;\r\n\r\n  //     // 기본 경로 그리기\r\n  //     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  //     const ladderHeight = 600;\r\n  //     const ladderY = 50;\r\n\r\n  //     // 수직선 그리기\r\n  //     const imgPositions = [];\r\n  //     data.forEach((playerData, index) => {\r\n  //       const img = imgRefs.current[index];\r\n  //       if (img) {\r\n  //         const rect = img.getBoundingClientRect();\r\n  //         const canvasRect = canvas.getBoundingClientRect();\r\n  //         const imgX = rect.left - canvasRect.left + img.width / 2;\r\n  //         imgPositions.push(imgX);\r\n  //         ctx.beginPath();\r\n  //         ctx.moveTo(imgX, 0);\r\n  //         ctx.lineTo(imgX, ladderHeight);\r\n  //         ctx.stroke();\r\n  //       }\r\n  //     });\r\n\r\n  //     // 수평선 그리기\r\n  //     ctx.strokeStyle = 'black'; // 기본 경로 색상\r\n  //     paths.forEach((pathArray) => {\r\n  //       pathArray.forEach((path) => {\r\n  //         const { startX, endX, y } = path.coord;\r\n  //         ctx.beginPath();\r\n  //         ctx.moveTo(startX, y);\r\n  //         ctx.lineTo(endX, y);\r\n  //         ctx.stroke();\r\n  //       });\r\n  //     });\r\n\r\n  //     // 애니메이션 경로 그리기\r\n  //     ctx.strokeStyle = 'red'; // 애니메이션 경로 색상\r\n  //     const updatedAnimatedPaths = animatedPaths.map((path) => {\r\n  //       const { coord, currentX } = path;\r\n  //       const animationSpeed = 2; // 애니메이션 속도 조절\r\n  //       const newX = currentX + animationSpeed;\r\n  //       const { endX, y } = coord;\r\n\r\n  //       if (newX > endX) {\r\n  //         return { ...path, currentX: endX, animationProgress: 1 }; // 애니메이션 완료\r\n  //       }\r\n\r\n  //       ctx.beginPath();\r\n  //       ctx.moveTo(currentX, y);\r\n  //       ctx.lineTo(newX, y);\r\n  //       ctx.stroke();\r\n\r\n  //       return {\r\n  //         ...path,\r\n  //         currentX: newX\r\n  //       };\r\n  //     });\r\n\r\n  //     setAnimatedPaths(updatedAnimatedPaths);\r\n\r\n  //     // 애니메이션 계속\r\n  //     setAnimationFrameId(requestAnimationFrame(animate));\r\n  //   };\r\n\r\n  //   animate();\r\n    \r\n  //   return () => {\r\n  //     if (animationFrameId ) {\r\n  //       cancelAnimationFrame(animationFrameId);\r\n  //     }\r\n  //   };\r\n  // }, [paths, animatedPaths, animationFrameId]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}