{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [distance, setDistance] = useState(0);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderWidth = canvas.width;\n    const ladderHeight = canvas.height;\n    const numPlayers = data.length;\n    const stepHeight = ladderHeight / (numPlayers + 3);\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 5;\n    let firstX = null;\n    let secondX = null;\n\n    // 수직선 그리기\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const imgX = img.offsetLeft + img.width / 6; // 상대적인 X 위치\n        if (firstX === null) {\n          firstX = imgX; // 첫 번째 수직선의 X 좌표 저장\n        } else if (secondX === null) {\n          secondX = imgX; // 두 번째 수직선의 X 좌표 저장\n        }\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    if (firstX !== null && secondX !== null) {\n      setDistance(Math.abs(secondX - firstX)); // 첫 번째와 두 번째 수직선 사이의 거리 계산\n    }\n    ctx.strokeStyle = '#000';\n    ctx.lineWidth = 5;\n    const midX = firstX && secondX ? (firstX + secondX) / 2 : null;\n    lines.forEach(line => {\n      ctx.beginPath();\n      if (midX !== null) {\n        ctx.moveTo(midX, line.y);\n        ctx.lineTo(ladderWidth, line.y);\n      } else {\n        ctx.moveTo(line.x * (ladderWidth / width), line.y);\n        ctx.lineTo(ladderWidth, line.y);\n      }\n      ctx.stroke();\n    });\n  }, [data, imgRefs, width, lines]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"ODkFbhYxvUJ05RrhJFrC7J76Exs=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","lines","setLines","distance","setDistance","canvas","current","ctx","getContext","ladderWidth","ladderHeight","height","numPlayers","length","stepHeight","clearRect","strokeStyle","lineWidth","firstX","secondX","forEach","playerData","index","img","imgX","offsetLeft","beginPath","moveTo","lineTo","stroke","Math","abs","midX","line","y","x","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(0);\r\n  const [lines, setLines] = useState([]); \r\n  const [distance,setDistance] = useState(0); \r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n  \r\n    if (!ctx) return;\r\n  \r\n    const ladderWidth = canvas.width;\r\n    const ladderHeight = canvas.height;\r\n    const numPlayers = data.length;\r\n    const stepHeight = ladderHeight / (numPlayers + 3);\r\n  \r\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\r\n  \r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 5;\r\n  \r\n    let firstX = null;\r\n    let secondX = null;\r\n  \r\n    // 수직선 그리기\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const imgX = img.offsetLeft + img.width / 6; // 상대적인 X 위치\r\n        if (firstX === null) {\r\n          firstX = imgX; // 첫 번째 수직선의 X 좌표 저장\r\n        } else if (secondX === null) {\r\n          secondX = imgX; // 두 번째 수직선의 X 좌표 저장\r\n        }\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n  \r\n    if (firstX !== null && secondX !== null) {\r\n      setDistance(Math.abs(secondX - firstX)); // 첫 번째와 두 번째 수직선 사이의 거리 계산\r\n    }\r\n  \r\n    ctx.strokeStyle = '#000';\r\n    ctx.lineWidth = 5;\r\n  \r\n    const midX = firstX && secondX ? (firstX + secondX) / 2 : null;\r\n  \r\n    lines.forEach((line) => {\r\n      ctx.beginPath();\r\n      if (midX !== null) {\r\n        ctx.moveTo(midX, line.y);\r\n        ctx.lineTo(ladderWidth, line.y);\r\n      } else {\r\n        ctx.moveTo(line.x * (ladderWidth / width), line.y);\r\n        ctx.lineTo(ladderWidth, line.y);\r\n      }\r\n      ctx.stroke();\r\n    });\r\n  }, [data, imgRefs, width, lines]);\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}