{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const initialSValues = Array(horizontalLines).fill(10);\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // Draw horizontal line\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: Math.round(x1),\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          s: initialSValues[i],\n          currentY: 0,\n          direction: 'down',\n          horizontalStepSize: 5,\n          stepSize: 5,\n          horizontalDirection: x2 > x1 ? 'right' : 'left'\n        });\n      }\n    }\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          y,\n          direction,\n          stepSize,\n          horizontalStepSize,\n          horizontalDirection,\n          targetX\n        } = path;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 2;\n        if (direction === 'down') {\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          ctx.lineTo(currentX, currentY);\n          ctx.stroke();\n          if (currentY < y) {\n            path.currentY = Math.min(currentY + stepSize, y);\n          } else if (currentY >= y) {\n            path.direction = 'horizontal';\n            path.currentX = currentX;\n          }\n        } else if (direction === 'horizontal') {\n          ctx.beginPath();\n          ctx.moveTo(currentX, y);\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? 1 : -1), y);\n          ctx.stroke();\n          if (horizontalDirection === 'right') {\n            if (currentX < targetX) {\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\n            } else if (currentX >= targetX) {\n              path.direction = 'down';\n              path.currentY = y;\n            }\n          } else if (horizontalDirection === 'left') {\n            if (currentX > targetX) {\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\n            } else if (currentX <= targetX) {\n              path.direction = 'down';\n              path.currentY = y;\n            }\n          }\n        }\n      });\n      requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n    return () => {\n      // Cleanup animation frame request\n      cancelAnimationFrame(animate);\n    };\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"YIp0a0fTZDOz1AsfYdVwyc1BMCU=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","initialSValues","Array","fill","i","x1","x2","startY","startX","round","currentX","targetX","y","s","currentY","direction","horizontalStepSize","stepSize","horizontalDirection","colors","animate","path","strokeStyle","lineWidth","min","max","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const initialSValues = Array(horizontalLines).fill(10);\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      // Draw horizontal line\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: Math.round(x1),\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          s: initialSValues[i],\r\n          currentY: 0,\r\n          direction: 'down',\r\n          horizontalStepSize: 5,\r\n          stepSize: 5,\r\n          horizontalDirection: x2 > x1 ? 'right' : 'left'\r\n        });\r\n      }\r\n    }\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n\r\n  }, [width, data, imgRefs.current]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n   \r\n\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, y, direction, stepSize, horizontalStepSize, horizontalDirection, targetX } = path;\r\n\r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 2;\r\n\r\n        if (direction === 'down') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          ctx.lineTo(currentX, currentY);\r\n          ctx.stroke();\r\n\r\n          if (currentY < y) {\r\n            path.currentY = Math.min(currentY + stepSize, y);\r\n          } else if (currentY >= y) {\r\n            path.direction = 'horizontal';\r\n            path.currentX = currentX;\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, y);\r\n          ctx.lineTo(currentX + (horizontalDirection === 'right' ? 1 : -1), y);\r\n          ctx.stroke();\r\n\r\n          if (horizontalDirection === 'right') {\r\n            if (currentX < targetX) {\r\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\r\n            } else if (currentX >= targetX) {\r\n              path.direction = 'down';\r\n              path.currentY = y;\r\n            }\r\n          } else if (horizontalDirection === 'left') {\r\n            if (currentX > targetX) {\r\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\r\n            } else if (currentX <= targetX) {\r\n              path.direction = 'down';\r\n              path.currentY = y;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      // Cleanup animation frame request\r\n      cancelAnimationFrame(animate);\r\n    };\r\n  }, [animatedPaths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}