{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [paths, setPaths] = useState([]);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const animationFrameIdRef = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // 수직선 그리기\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newPaths = Array.from({\n      length: data.length\n    }, () => []);\n    const newAnimatedPaths = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // 수평선 그리기\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      newPaths[imgPositions.indexOf(x1)].push({\n        coord: {\n          startX: x1,\n          endX: x2,\n          y: startY\n        },\n        connectedIndex: {\n          vertical: imgPositions.indexOf(x2)\n        }\n      });\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startX: x1,\n          currentY: 0,\n          targetX: x2,\n          y: startY,\n          direction: 'down',\n          horizontalProgress: 0,\n          stepSize: 5\n        });\n      }\n    }\n    setPaths(newPaths);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      // 모든 수직선 그리기 (애니메이션 적용)\n      animatedPaths.forEach((path, index) => {\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 2;\n        const {\n          startX,\n          endX,\n          y\n        } = path;\n        if (path.direction === 'down') {\n          if (path.currentY < path.y) {\n            ctx.beginPath();\n            ctx.moveTo(path.startX, 0);\n            ctx.lineTo(path.startX, path.currentY);\n            ctx.stroke();\n            path.currentY += 10;\n          } else if (path.currentY === path.y) {\n            path.direction = 'horizontal';\n          }\n        }\n        if (path.direction === 'horizontal') {\n          if (path.startX !== path.targetX) {\n            ctx.beginPath();\n            ctx.moveTo(startX, y);\n            ctx.lineTo(endX, y);\n            ctx.stroke();\n            path.startX += path.startX < path.targetX ? 5 : -5;\n          } else {\n            path.direction = 'down'; // 수평 이동 완료 후 다시 하강\n          }\n        }\n        if (path.direction === 'down' && path.currentY < 600) {\n          path.currentY += 5;\n        }\n      });\n      animationFrameIdRef.current = requestAnimationFrame(animate);\n    };\n    animationFrameIdRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animationFrameIdRef.current);\n  }, [animatedPaths, paths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"6jUqUQjnGPCVBVWhurB2xCcc7zA=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","paths","setPaths","animatedPaths","setAnimatedPaths","animationFrameIdRef","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newPaths","Array","from","newAnimatedPaths","i","x1","x2","startY","indexOf","coord","startX","endX","y","connectedIndex","vertical","currentY","targetX","direction","horizontalProgress","stepSize","colors","animate","path","strokeStyle","lineWidth","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [paths, setPaths] = useState([]);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const animationFrameIdRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100); // 화면의 너비에 따라 canvas의 너비를 업데이트\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // 수직선 그리기\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newPaths = Array.from({ length: data.length }, () => []);\r\n    const newAnimatedPaths = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      // 수평선 그리기\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n\r\n      newPaths[imgPositions.indexOf(x1)].push({\r\n        coord: { startX: x1, endX: x2, y: startY },\r\n        connectedIndex: { vertical: imgPositions.indexOf(x2) }\r\n      });\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startX: x1,\r\n        currentY: 0,\r\n        targetX: x2,\r\n        y: startY,\r\n        direction: 'down', \r\n        horizontalProgress: 0,\r\n        stepSize: 5 \r\n        });\r\n      }\r\n    }\r\n\r\n    setPaths(newPaths);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n   \r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n      // 모든 수직선 그리기 (애니메이션 적용)\r\n      animatedPaths.forEach((path, index) => {\r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 2;\r\n        const { startX, endX, y } = path;\r\n        \r\n     \r\n        if (path.direction === 'down') {\r\n          if (path.currentY < path.y) {\r\n            ctx.beginPath();\r\n        ctx.moveTo(path.startX, 0);\r\n        ctx.lineTo(path.startX, path.currentY);\r\n        ctx.stroke();\r\n            path.currentY += 10;\r\n          }  else if(path.currentY === path.y){\r\n            path.direction = 'horizontal';\r\n          }\r\n        }\r\n\r\n        if (path.direction === 'horizontal') {\r\n          if (path.startX !== path.targetX) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(startX, y);\r\n            ctx.lineTo(endX, y);\r\n            ctx.stroke();\r\n            path.startX += path.startX < path.targetX ? 5 : -5;\r\n          } else {\r\n            path.direction = 'down'; // 수평 이동 완료 후 다시 하강\r\n          }\r\n        }\r\n\r\n        if (path.direction === 'down' && path.currentY < 600) {\r\n          path.currentY += 5;\r\n        }\r\n      });\r\n\r\n      animationFrameIdRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animationFrameIdRef.current = requestAnimationFrame(animate);\r\n\r\n    return () => cancelAnimationFrame(animationFrameIdRef.current);\r\n  }, [animatedPaths, paths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}