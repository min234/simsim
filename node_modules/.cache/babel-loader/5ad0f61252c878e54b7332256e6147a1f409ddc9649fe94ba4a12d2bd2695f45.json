{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const animationFrameId = useRef(null);\n  const [isPaused, setIsPaused] = useState(false);\n  const [tolerance] = useState(5);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const startYValues = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      startYValues.push(startY);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          startYValues: startYValues,\n          startX: Math.round(x1),\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          currentY: 0,\n          direction: 'down',\n          horizontalStepSize: 5,\n          stepSize: 5,\n          horizontalDirection: x2 > x1 ? 'right' : 'left',\n          endY: ladderHeight\n        });\n      }\n    }\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const animate = () => {\n      let allPathsCompleted = true;\n      if (isPaused) {\n        animationFrameId.current = requestAnimationFrame(animate);\n        return;\n      }\n      const ctx = canvasRef.current.getContext('2d');\n      const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          direction,\n          stepSize,\n          horizontalStepSize,\n          horizontalDirection,\n          targetX,\n          endY,\n          startYValues\n        } = path;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 3;\n        const sortedYValues = startYValues.slice().sort((a, b) => a - b);\n        const nextY = sortedYValues.find(yVal => currentY < yVal) || endY;\n        if (direction === 'down') {\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          path.currentY = Math.min(currentY + stepSize, nextY);\n          ctx.lineTo(currentX, path.currentY);\n          ctx.stroke();\n          if (Math.abs(currentY - nextY) < tolerance) {\n            path.currentY = nextY;\n            path.direction = 'horizontal';\n            path.currentX = currentX;\n            setIsPaused(true);\n            console.log(isPaused);\n          }\n        } else if (direction === 'horizontal') {\n          ctx.lineWidth = 4;\n          setIsPaused(false);\n          console.log(isPaused);\n          ctx.beginPath();\n          ctx.moveTo(currentX, nextY);\n          const nextX = currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize);\n          ctx.lineTo(nextX, nextY);\n          ctx.stroke();\n          if (horizontalDirection === 'right' && nextX >= targetX || horizontalDirection === 'left' && nextX <= targetX) {\n            path.direction = 'down';\n          }\n        }\n        if (path.currentY < endY) {\n          allPathsCompleted = false;\n        }\n      });\n      if (!allPathsCompleted) {\n        animationFrameId.current = requestAnimationFrame(animate);\n      } else {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n\n    // 애니메이션 실행 및 상태 변화 감지\n    animationFrameId.current = requestAnimationFrame(animate);\n\n    // 애니메이션 중지 시 클린업\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, [animatedPaths, isPaused]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"cnNQOy73hysGrX3Wl6DKPHrmnCk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","animationFrameId","isPaused","setIsPaused","tolerance","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","startYValues","i","x1","x2","startY","startX","round","currentX","targetX","y","currentY","direction","horizontalStepSize","stepSize","horizontalDirection","endY","animate","allPathsCompleted","requestAnimationFrame","colors","path","strokeStyle","lineWidth","sortedYValues","slice","sort","a","b","nextY","find","yVal","min","abs","console","log","nextX","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const animationFrameId = useRef(null);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [tolerance] = useState(5);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const startYValues = [];\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      startYValues.push(startY);\r\n      \r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          startYValues: startYValues,\r\n          startX: Math.round(x1),\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          currentY: 0,\r\n          direction: 'down',\r\n          horizontalStepSize: 5,\r\n          stepSize: 5,\r\n          horizontalDirection: x2 > x1 ? 'right' : 'left',\r\n          endY: ladderHeight\r\n        });\r\n      }\r\n    }\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n\r\n  }, [width, data, imgRefs.current]);\r\n\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      let allPathsCompleted = true;\r\n\r\n      if (isPaused) {\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n        return;\r\n      }\r\n\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, direction, stepSize, horizontalStepSize, horizontalDirection, targetX, endY, startYValues } = path;\r\n        \r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 3;\r\n        const sortedYValues = startYValues.slice().sort((a, b) => a - b);\r\n        const nextY = sortedYValues.find(yVal => currentY < yVal) || endY;\r\n        \r\n        if (direction === 'down') {\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          path.currentY = Math.min(currentY + stepSize, nextY);\r\n          ctx.lineTo(currentX, path.currentY);\r\n          ctx.stroke();\r\n          \r\n          if (Math.abs(currentY - nextY) < tolerance) {\r\n            path.currentY = nextY;\r\n            path.direction = 'horizontal';\r\n            path.currentX = currentX;\r\n            setIsPaused(true);\r\n            console.log(isPaused)\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          ctx.lineWidth = 4;\r\n          setIsPaused(false)\r\n          console.log(isPaused)\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, nextY);\r\n          const nextX = currentX + (horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize);\r\n          ctx.lineTo(nextX, nextY);\r\n          ctx.stroke();\r\n\r\n          if ((horizontalDirection === 'right' && nextX >= targetX) || (horizontalDirection === 'left' && nextX <= targetX)) {\r\n            path.direction = 'down';\r\n          }\r\n        }\r\n\r\n        if (path.currentY < endY) {\r\n          allPathsCompleted = false;\r\n        }\r\n      });\r\n\r\n      if (!allPathsCompleted) {\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n      } else {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n\r\n    // 애니메이션 실행 및 상태 변화 감지\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n    // 애니메이션 중지 시 클린업\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    };\r\n  }, [animatedPaths, isPaused]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;EAC3D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMgB,gBAAgB,GAAGf,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACmB,SAAS,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAE/BE,SAAS,CAAC,MAAM;IACd,MAAMkB,gBAAgB,GAAGA,CAAA,KAAM;MAC7BT,QAAQ,CAACC,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;IACnC,CAAC;IAEDD,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAED,gBAAgB,CAAC;IACnDA,gBAAgB,CAAC,CAAC;IAClB,OAAO,MAAMR,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEF,gBAAgB,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,MAAM;IACd,MAAMqB,MAAM,GAAGd,SAAS,CAACe,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,YAAY,GAAG,GAAG;IACxB,MAAMC,OAAO,GAAG,EAAE;IAElBH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEN,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACO,MAAM,CAAC;IAChD,MAAMC,YAAY,GAAG,EAAE;IAEvBzB,IAAI,CAAC0B,OAAO,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;MAClC,MAAMC,GAAG,GAAG5B,OAAO,CAACiB,OAAO,CAACU,KAAK,CAAC;MAClC,IAAIC,GAAG,EAAE;QACP,MAAMC,IAAI,GAAGD,GAAG,CAACE,qBAAqB,CAAC,CAAC;QACxC,MAAMC,UAAU,GAAGf,MAAM,CAACc,qBAAqB,CAAC,CAAC;QACjD,MAAME,IAAI,GAAGH,IAAI,CAACI,IAAI,GAAGF,UAAU,CAACE,IAAI,GAAGL,GAAG,CAACzB,KAAK,GAAG,CAAC;QACxDqB,YAAY,CAACU,IAAI,CAACF,IAAI,CAAC;;QAEvB;QACAd,GAAG,CAACiB,SAAS,CAAC,CAAC;QACfjB,GAAG,CAACkB,MAAM,CAACJ,IAAI,EAAE,CAAC,CAAC;QACnBd,GAAG,CAACmB,MAAM,CAACL,IAAI,EAAEZ,YAAY,CAAC;QAC9BF,GAAG,CAACoB,MAAM,CAAC,CAAC;MACd;IACF,CAAC,CAAC;IAEF,MAAMC,kBAAkB,GAAGxC,IAAI,CAACyC,MAAM,GAAG,CAAC;IAC1C,MAAMC,eAAe,GAAGF,kBAAkB,GAAGG,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAEzE,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,YAAY,GAAG,EAAE;IACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,EAAEM,CAAC,EAAE,EAAE;MACxC,MAAMC,EAAE,GAAGxB,YAAY,CAACuB,CAAC,GAAGvB,YAAY,CAACgB,MAAM,CAAC;MAChD,MAAMS,EAAE,GAAGzB,YAAY,CAAC,CAACuB,CAAC,GAAG,CAAC,IAAIvB,YAAY,CAACgB,MAAM,CAAC;MACtD,IAAIU,MAAM,GAAG7B,OAAO,GAAGqB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxB,YAAY;MACnDF,GAAG,CAACiB,SAAS,CAAC,CAAC;MACfjB,GAAG,CAACkB,MAAM,CAACY,EAAE,EAAEE,MAAM,CAAC;MACtBhC,GAAG,CAACmB,MAAM,CAACY,EAAE,EAAEC,MAAM,CAAC;MACtBhC,GAAG,CAACoB,MAAM,CAAC,CAAC;MACZQ,YAAY,CAACZ,IAAI,CAACgB,MAAM,CAAC;MAEzB,IAAIL,gBAAgB,CAACL,MAAM,GAAGzC,IAAI,CAACyC,MAAM,EAAE;QACzCK,gBAAgB,CAACX,IAAI,CAAC;UACpBY,YAAY,EAAEA,YAAY;UAC1BK,MAAM,EAAET,IAAI,CAACU,KAAK,CAACJ,EAAE,CAAC;UACtBK,QAAQ,EAAEX,IAAI,CAACU,KAAK,CAACJ,EAAE,CAAC;UACxBM,OAAO,EAAEZ,IAAI,CAACU,KAAK,CAACH,EAAE,CAAC;UACvBM,CAAC,EAAEb,IAAI,CAACU,KAAK,CAACF,MAAM,CAAC;UACrBM,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE,MAAM;UACjBC,kBAAkB,EAAE,CAAC;UACrBC,QAAQ,EAAE,CAAC;UACXC,mBAAmB,EAAEX,EAAE,GAAGD,EAAE,GAAG,OAAO,GAAG,MAAM;UAC/Ca,IAAI,EAAEzC;QACR,CAAC,CAAC;MACJ;IACF;IAEAZ,gBAAgB,CAACqC,gBAAgB,CAAC;EAEpC,CAAC,EAAE,CAAC1C,KAAK,EAAEJ,IAAI,EAAEC,OAAO,CAACiB,OAAO,CAAC,CAAC;EAElCtB,SAAS,CAAC,MAAM;IACd,MAAMmE,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAIC,iBAAiB,GAAG,IAAI;MAE5B,IAAIrD,QAAQ,EAAE;QACZD,gBAAgB,CAACQ,OAAO,GAAG+C,qBAAqB,CAACF,OAAO,CAAC;QACzD;MACF;MAEA,MAAM5C,GAAG,GAAGhB,SAAS,CAACe,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAC9C,MAAM8C,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;MACzD1D,aAAa,CAACkB,OAAO,CAAC,CAACyC,IAAI,EAAEvC,KAAK,KAAK;QACrC,MAAM;UAAE0B,QAAQ;UAAEG,QAAQ;UAAEC,SAAS;UAAEE,QAAQ;UAAED,kBAAkB;UAAEE,mBAAmB;UAAEN,OAAO;UAAEO,IAAI;UAAEf;QAAa,CAAC,GAAGoB,IAAI;QAE9HhD,GAAG,CAACiD,WAAW,GAAGF,MAAM,CAACtC,KAAK,GAAGsC,MAAM,CAACzB,MAAM,CAAC;QAC/CtB,GAAG,CAACkD,SAAS,GAAG,CAAC;QACjB,MAAMC,aAAa,GAAGvB,YAAY,CAACwB,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;QAChE,MAAMC,KAAK,GAAGL,aAAa,CAACM,IAAI,CAACC,IAAI,IAAIpB,QAAQ,GAAGoB,IAAI,CAAC,IAAIf,IAAI;QAEjE,IAAIJ,SAAS,KAAK,MAAM,EAAE;UACxBvC,GAAG,CAACiB,SAAS,CAAC,CAAC;UACfjB,GAAG,CAACkB,MAAM,CAACiB,QAAQ,EAAEG,QAAQ,CAAC;UAC9BU,IAAI,CAACV,QAAQ,GAAGd,IAAI,CAACmC,GAAG,CAACrB,QAAQ,GAAGG,QAAQ,EAAEe,KAAK,CAAC;UACpDxD,GAAG,CAACmB,MAAM,CAACgB,QAAQ,EAAEa,IAAI,CAACV,QAAQ,CAAC;UACnCtC,GAAG,CAACoB,MAAM,CAAC,CAAC;UAEZ,IAAII,IAAI,CAACoC,GAAG,CAACtB,QAAQ,GAAGkB,KAAK,CAAC,GAAG9D,SAAS,EAAE;YAC1CsD,IAAI,CAACV,QAAQ,GAAGkB,KAAK;YACrBR,IAAI,CAACT,SAAS,GAAG,YAAY;YAC7BS,IAAI,CAACb,QAAQ,GAAGA,QAAQ;YACxB1C,WAAW,CAAC,IAAI,CAAC;YACjBoE,OAAO,CAACC,GAAG,CAACtE,QAAQ,CAAC;UACvB;QACF,CAAC,MAAM,IAAI+C,SAAS,KAAK,YAAY,EAAE;UACrCvC,GAAG,CAACkD,SAAS,GAAG,CAAC;UACjBzD,WAAW,CAAC,KAAK,CAAC;UAClBoE,OAAO,CAACC,GAAG,CAACtE,QAAQ,CAAC;UACrBQ,GAAG,CAACiB,SAAS,CAAC,CAAC;UACfjB,GAAG,CAACkB,MAAM,CAACiB,QAAQ,EAAEqB,KAAK,CAAC;UAC3B,MAAMO,KAAK,GAAG5B,QAAQ,IAAIO,mBAAmB,KAAK,OAAO,GAAGF,kBAAkB,GAAG,CAACA,kBAAkB,CAAC;UACrGxC,GAAG,CAACmB,MAAM,CAAC4C,KAAK,EAAEP,KAAK,CAAC;UACxBxD,GAAG,CAACoB,MAAM,CAAC,CAAC;UAEZ,IAAKsB,mBAAmB,KAAK,OAAO,IAAIqB,KAAK,IAAI3B,OAAO,IAAMM,mBAAmB,KAAK,MAAM,IAAIqB,KAAK,IAAI3B,OAAQ,EAAE;YACjHY,IAAI,CAACT,SAAS,GAAG,MAAM;UACzB;QACF;QAEA,IAAIS,IAAI,CAACV,QAAQ,GAAGK,IAAI,EAAE;UACxBE,iBAAiB,GAAG,KAAK;QAC3B;MACF,CAAC,CAAC;MAEF,IAAI,CAACA,iBAAiB,EAAE;QACtBtD,gBAAgB,CAACQ,OAAO,GAAG+C,qBAAqB,CAACF,OAAO,CAAC;MAC3D,CAAC,MAAM;QACLoB,oBAAoB,CAACzE,gBAAgB,CAACQ,OAAO,CAAC;MAChD;IACF,CAAC;;IAED;IACAR,gBAAgB,CAACQ,OAAO,GAAG+C,qBAAqB,CAACF,OAAO,CAAC;;IAEzD;IACA,OAAO,MAAM;MACXoB,oBAAoB,CAACzE,gBAAgB,CAACQ,OAAO,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACV,aAAa,EAAEG,QAAQ,CAAC,CAAC;EAE7B,oBACEb,OAAA;IACEsF,GAAG,EAAEjF,SAAU;IACfC,KAAK,EAAEA,KAAM;IACboB,MAAM,EAAE;EAAI;IAAA6D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN,CAAC;AAACtF,EAAA,CA/JIH,MAAM;AAAA0F,EAAA,GAAN1F,MAAM;AAiKZ,eAAeA,MAAM;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}