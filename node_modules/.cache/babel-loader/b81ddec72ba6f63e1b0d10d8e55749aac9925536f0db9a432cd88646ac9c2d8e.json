{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth); // 화면의 너비에 따라 canvas의 너비를 업데이트\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ladderWidth = width;\n    const ladderHeight = 600;\n    const Player = data.length;\n    const ladderX = 50; // 캔버스 좌표계 내부 기본 x값과 y값\n    const ladderY = 0;\n    const minHorizontalLines = Player;\n    const columnGap = ladderWidth / minHorizontalLines;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (let i = 0; i < Player; i++) {\n      data.forEach((playerData, index) => {\n        const img = imgRefs.current[index];\n        if (img) {\n          const imgX = img.offsetLeft + img.width; // 중앙을 기준으로 X 위치 계산\n          ctx.beginPath();\n          ctx.moveTo(imgX, 0);\n          ctx.lineTo(imgX, ladderHeight);\n          ctx.stroke();\n        }\n      });\n    }\n  }, [width, data]); // width 또는 data가 변경될 때마다 그리기 작업을 실행\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xgEUy5r1wxOfEAiChSQW6mafEIA=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderWidth","ladderHeight","Player","length","ladderX","ladderY","minHorizontalLines","columnGap","clearRect","height","i","forEach","playerData","index","img","imgX","offsetLeft","beginPath","moveTo","lineTo","stroke","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth -100);\r\n  \r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth); // 화면의 너비에 따라 canvas의 너비를 업데이트\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n  \r\n    const ladderWidth = width;\r\n    const ladderHeight = 600;\r\n    const Player = data.length;\r\n    const ladderX = 50; // 캔버스 좌표계 내부 기본 x값과 y값\r\n    const ladderY = 0;\r\n\r\n    const minHorizontalLines = Player ;\r\n\r\n    const columnGap = ladderWidth / minHorizontalLines; \r\n    \r\n  \r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    for (let i = 0; i < Player; i++) {\r\n      data.forEach((playerData, index) => {\r\n        const img = imgRefs.current[index];\r\n        if (img) {\r\n          const imgX = img.offsetLeft + img.width ; // 중앙을 기준으로 X 위치 계산\r\n          ctx.beginPath();\r\n          ctx.moveTo(imgX, 0);\r\n          ctx.lineTo(imgX, ladderHeight);\r\n          ctx.stroke();\r\n        }})\r\n    \r\n    }\r\n  }, [width, data]); // width 또는 data가 변경될 때마다 그리기 작업을 실행\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,MAAM,CAACC,UAAU,GAAE,GAAG,CAAC;EAE1DX,SAAS,CAAC,MAAM;IACd,MAAMY,gBAAgB,GAAGA,CAAA,KAAM;MAC7BH,QAAQ,CAACC,MAAM,CAACC,UAAU,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEDD,MAAM,CAACG,gBAAgB,CAAC,QAAQ,EAAED,gBAAgB,CAAC;IAEnD,OAAO,MAAMF,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAEF,gBAAgB,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACd,MAAMe,MAAM,GAAGR,SAAS,CAACS,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,WAAW,GAAGX,KAAK;IACzB,MAAMY,YAAY,GAAG,GAAG;IACxB,MAAMC,MAAM,GAAGjB,IAAI,CAACkB,MAAM;IAC1B,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;IACpB,MAAMC,OAAO,GAAG,CAAC;IAEjB,MAAMC,kBAAkB,GAAGJ,MAAM;IAEjC,MAAMK,SAAS,GAAGP,WAAW,GAAGM,kBAAkB;IAGlDR,GAAG,CAACU,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEZ,MAAM,CAACP,KAAK,EAAEO,MAAM,CAACa,MAAM,CAAC;IAEhD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAC/BzB,IAAI,CAAC0B,OAAO,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;QAClC,MAAMC,GAAG,GAAG5B,OAAO,CAACW,OAAO,CAACgB,KAAK,CAAC;QAClC,IAAIC,GAAG,EAAE;UACP,MAAMC,IAAI,GAAGD,GAAG,CAACE,UAAU,GAAGF,GAAG,CAACzB,KAAK,CAAE,CAAC;UAC1CS,GAAG,CAACmB,SAAS,CAAC,CAAC;UACfnB,GAAG,CAACoB,MAAM,CAACH,IAAI,EAAE,CAAC,CAAC;UACnBjB,GAAG,CAACqB,MAAM,CAACJ,IAAI,EAAEd,YAAY,CAAC;UAC9BH,GAAG,CAACsB,MAAM,CAAC,CAAC;QACd;MAAC,CAAC,CAAC;IAEP;EACF,CAAC,EAAE,CAAC/B,KAAK,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEnB,oBACEF,OAAA;IACEsC,GAAG,EAAEjC,SAAU;IACfC,KAAK,EAAEA,KAAM;IACboB,MAAM,EAAE;EAAI;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN,CAAC;AAACtC,EAAA,CAvDIH,MAAM;AAAA0C,EAAA,GAAN1C,MAAM;AAyDZ,eAAeA,MAAM;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}