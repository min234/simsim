{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const [startYValues, setStartValues] = useState([]);\n  const [imgPositions, setImgPositions] = useState([]);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const newImgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        newImgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    setImgPositions(newImgPositions);\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const newStartYValues = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = newImgPositions[i % newImgPositions.length];\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      // Draw horizontal line\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      newStartYValues.push(startY);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          currentY: 0,\n          direction: 'down',\n          horizontalStepSize: 5,\n          stepSize: 5,\n          endY: ladderHeight,\n          completed: false,\n          initialX: Math.round(x1)\n        });\n      }\n    }\n    setStartValues(newStartYValues);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const updatePath = path => {\n      const {\n        currentX,\n        currentY,\n        direction,\n        stepSize,\n        targetX,\n        endY,\n        initialX\n      } = path;\n      if (direction === 'down') {\n        const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\n        const updatedY = Math.min(currentY + stepSize, nextY);\n        return {\n          ...path,\n          currentY: updatedY,\n          direction: updatedY >= nextY ? 'horizontal' : direction\n        };\n      }\n      if (direction === 'horizontal') {\n        const nextX = currentX < targetX ? Math.min(currentX + stepSize, targetX) : Math.max(currentX - stepSize, targetX);\n        return {\n          ...path,\n          currentX: nextX,\n          direction: nextX === targetX ? 'down' : direction\n        };\n      }\n      return path;\n    };\n    const animate = () => {\n      let allPathsCompleted = true;\n      setAnimatedPaths(paths => {\n        return paths.map(path => {\n          if (path.completed) return path; // 이미 완료된 애니메이션은 건너뛰기\n\n          ctx.strokeStyle = colors[paths.indexOf(path) % colors.length];\n          ctx.lineWidth = 3;\n\n          // 경로 업데이트\n          const updatedPath = updatePath(path);\n\n          // 현재 Y가 endY 이상이면 애니메이션 완료로 설정\n          if (updatedPath.currentY >= updatedPath.endY && updatedPath.currentX === updatedPath.initialX) {\n            updatedPath.completed = true;\n          } else {\n            allPathsCompleted = false;\n          }\n\n          // 경로 그리기\n          ctx.beginPath();\n          ctx.moveTo(path.currentX, path.currentY);\n          if (updatedPath.direction === 'down') {\n            const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || updatedPath.endY;\n            ctx.lineTo(path.currentX, Math.min(updatedPath.currentY + path.stepSize, nextY));\n          } else if (updatedPath.direction === 'horizontal') {\n            ctx.lineTo(updatedPath.currentX, path.currentY);\n          }\n          ctx.stroke();\n          return updatedPath;\n        });\n      });\n      if (!allPathsCompleted) {\n        animationFrameId.current = requestAnimationFrame(animate);\n      } else {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n    animationFrameId.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, [animatedPaths, imgPositions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"fjH/QYOzPbD0g3+cpDuOyETnS9Y=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","startYValues","setStartValues","imgPositions","setImgPositions","animationFrameId","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","newImgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","newStartYValues","i","x1","x2","startY","currentX","round","targetX","y","currentY","direction","horizontalStepSize","stepSize","endY","completed","initialX","colors","updatePath","path","nextY","filter","yVal","sort","a","b","updatedY","min","nextX","max","animate","allPathsCompleted","paths","map","strokeStyle","indexOf","lineWidth","updatedPath","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const [startYValues, setStartValues] = useState([]);\r\n  const [imgPositions, setImgPositions] = useState([]);\r\n  const animationFrameId = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const newImgPositions = [];\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        newImgPositions.push(imgX);\r\n\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    setImgPositions(newImgPositions);\r\n  \r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const newStartYValues = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = newImgPositions[i % newImgPositions.length];\r\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n      // Draw horizontal line\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      newStartYValues.push(startY);\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          currentY: 0,\r\n          direction: 'down',\r\n          horizontalStepSize: 5,\r\n          stepSize: 5,\r\n          endY: ladderHeight,\r\n          completed: false,\r\n          initialX: Math.round(x1),\r\n        });\r\n      }\r\n    }\r\n    setStartValues(newStartYValues);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs.current]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const updatePath = (path) => {\r\n      const { currentX, currentY, direction, stepSize, targetX, endY, initialX } = path;\r\n\r\n      if (direction === 'down') {\r\n        const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\r\n        const updatedY = Math.min(currentY + stepSize, nextY);\r\n\r\n        return {\r\n          ...path,\r\n          currentY: updatedY,\r\n          direction: updatedY >= nextY ? 'horizontal' : direction\r\n        };\r\n      }\r\n\r\n      if (direction === 'horizontal') {\r\n        const nextX = currentX < targetX\r\n          ? Math.min(currentX + stepSize, targetX)\r\n          : Math.max(currentX - stepSize, targetX);\r\n\r\n        return {\r\n          ...path,\r\n          currentX: nextX,\r\n          direction: nextX === targetX ? 'down' : direction\r\n        };\r\n      }\r\n\r\n      return path;\r\n    };\r\n\r\n    const animate = () => {\r\n      let allPathsCompleted = true;\r\n\r\n      setAnimatedPaths((paths) => {\r\n        return paths.map((path) => {\r\n          if (path.completed) return path; // 이미 완료된 애니메이션은 건너뛰기\r\n\r\n          ctx.strokeStyle = colors[paths.indexOf(path) % colors.length];\r\n          ctx.lineWidth = 3;\r\n\r\n          // 경로 업데이트\r\n          const updatedPath = updatePath(path);\r\n\r\n          // 현재 Y가 endY 이상이면 애니메이션 완료로 설정\r\n          if (updatedPath.currentY >= updatedPath.endY && updatedPath.currentX === updatedPath.initialX) {\r\n            updatedPath.completed = true;\r\n          } else {\r\n            allPathsCompleted = false;\r\n          }\r\n\r\n          // 경로 그리기\r\n          ctx.beginPath();\r\n          ctx.moveTo(path.currentX, path.currentY);\r\n\r\n          if (updatedPath.direction === 'down') {\r\n            const nextY = startYValues.filter(yVal => yVal > path.currentY).sort((a, b) => a - b)[0] || updatedPath.endY;\r\n            ctx.lineTo(path.currentX, Math.min(updatedPath.currentY + path.stepSize, nextY));\r\n          } else if (updatedPath.direction === 'horizontal') {\r\n            ctx.lineTo(updatedPath.currentX, path.currentY);\r\n          }\r\n\r\n          ctx.stroke();\r\n\r\n          return updatedPath;\r\n        });\r\n      });\r\n\r\n      if (!allPathsCompleted) {\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n      } else {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    };\r\n  }, [animatedPaths, imgPositions]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;EAC3D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgB,YAAY,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMoB,gBAAgB,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAErCC,SAAS,CAAC,MAAM;IACd,MAAMmB,gBAAgB,GAAGA,CAAA,KAAM;MAC7BV,QAAQ,CAACC,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC;IACnC,CAAC;IAEDD,MAAM,CAACU,gBAAgB,CAAC,QAAQ,EAAED,gBAAgB,CAAC;IACnDA,gBAAgB,CAAC,CAAC;IAClB,OAAO,MAAMT,MAAM,CAACW,mBAAmB,CAAC,QAAQ,EAAEF,gBAAgB,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACd,MAAMsB,MAAM,GAAGf,SAAS,CAACgB,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,YAAY,GAAG,GAAG;IACxB,MAAMC,OAAO,GAAG,EAAE;IAElBH,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEN,MAAM,CAACd,KAAK,EAAEc,MAAM,CAACO,MAAM,CAAC;IAEhD,MAAMC,eAAe,GAAG,EAAE;IAC1B1B,IAAI,CAAC2B,OAAO,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;MAClC,MAAMC,GAAG,GAAG7B,OAAO,CAACkB,OAAO,CAACU,KAAK,CAAC;MAClC,IAAIC,GAAG,EAAE;QACP,MAAMC,IAAI,GAAGD,GAAG,CAACE,qBAAqB,CAAC,CAAC;QACxC,MAAMC,UAAU,GAAGf,MAAM,CAACc,qBAAqB,CAAC,CAAC;QACjD,MAAME,IAAI,GAAGH,IAAI,CAACI,IAAI,GAAGF,UAAU,CAACE,IAAI,GAAGL,GAAG,CAAC1B,KAAK,GAAG,CAAC;QACxDsB,eAAe,CAACU,IAAI,CAACF,IAAI,CAAC;;QAE1B;QACAd,GAAG,CAACiB,SAAS,CAAC,CAAC;QACfjB,GAAG,CAACkB,MAAM,CAACJ,IAAI,EAAE,CAAC,CAAC;QACnBd,GAAG,CAACmB,MAAM,CAACL,IAAI,EAAEZ,YAAY,CAAC;QAC9BF,GAAG,CAACoB,MAAM,CAAC,CAAC;MACd;IACF,CAAC,CAAC;IAEF3B,eAAe,CAACa,eAAe,CAAC;IAEhC,MAAMe,kBAAkB,GAAGzC,IAAI,CAAC0C,MAAM,GAAG,CAAC;IAC1C,MAAMC,eAAe,GAAGF,kBAAkB,GAAGG,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAEzE,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,eAAe,GAAG,EAAE;IAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,EAAEM,CAAC,EAAE,EAAE;MACxC,MAAMC,EAAE,GAAGxB,eAAe,CAACuB,CAAC,GAAGvB,eAAe,CAACgB,MAAM,CAAC;MACtD,MAAMS,EAAE,GAAGzB,eAAe,CAAC,CAACuB,CAAC,GAAG,CAAC,IAAIvB,eAAe,CAACgB,MAAM,CAAC;MAC5D,IAAIU,MAAM,GAAG7B,OAAO,GAAGqB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGxB,YAAY;MACnD;MACAF,GAAG,CAACiB,SAAS,CAAC,CAAC;MACfjB,GAAG,CAACkB,MAAM,CAACY,EAAE,EAAEE,MAAM,CAAC;MACtBhC,GAAG,CAACmB,MAAM,CAACY,EAAE,EAAEC,MAAM,CAAC;MACtBhC,GAAG,CAACoB,MAAM,CAAC,CAAC;MACZQ,eAAe,CAACZ,IAAI,CAACgB,MAAM,CAAC;MAE5B,IAAIL,gBAAgB,CAACL,MAAM,GAAG1C,IAAI,CAAC0C,MAAM,EAAE;QACzCK,gBAAgB,CAACX,IAAI,CAAC;UACpBiB,QAAQ,EAAET,IAAI,CAACU,KAAK,CAACJ,EAAE,CAAC;UACxBK,OAAO,EAAEX,IAAI,CAACU,KAAK,CAACH,EAAE,CAAC;UACvBK,CAAC,EAAEZ,IAAI,CAACU,KAAK,CAACF,MAAM,CAAC;UACrBK,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE,MAAM;UACjBC,kBAAkB,EAAE,CAAC;UACrBC,QAAQ,EAAE,CAAC;UACXC,IAAI,EAAEvC,YAAY;UAClBwC,SAAS,EAAE,KAAK;UAChBC,QAAQ,EAAEnB,IAAI,CAACU,KAAK,CAACJ,EAAE;QACzB,CAAC,CAAC;MACJ;IACF;IACAvC,cAAc,CAACqC,eAAe,CAAC;IAC/BvC,gBAAgB,CAACsC,gBAAgB,CAAC;EACpC,CAAC,EAAE,CAAC3C,KAAK,EAAEJ,IAAI,EAAEC,OAAO,CAACkB,OAAO,CAAC,CAAC;EAElCvB,SAAS,CAAC,MAAM;IACd,MAAMsB,MAAM,GAAGf,SAAS,CAACgB,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAM4C,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEzD,MAAMC,UAAU,GAAIC,IAAI,IAAK;MAC3B,MAAM;QAAEb,QAAQ;QAAEI,QAAQ;QAAEC,SAAS;QAAEE,QAAQ;QAAEL,OAAO;QAAEM,IAAI;QAAEE;MAAS,CAAC,GAAGG,IAAI;MAEjF,IAAIR,SAAS,KAAK,MAAM,EAAE;QACxB,MAAMS,KAAK,GAAGzD,YAAY,CAAC0D,MAAM,CAACC,IAAI,IAAIA,IAAI,GAAGZ,QAAQ,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIX,IAAI;QAC3F,MAAMY,QAAQ,GAAG7B,IAAI,CAAC8B,GAAG,CAACjB,QAAQ,GAAGG,QAAQ,EAAEO,KAAK,CAAC;QAErD,OAAO;UACL,GAAGD,IAAI;UACPT,QAAQ,EAAEgB,QAAQ;UAClBf,SAAS,EAAEe,QAAQ,IAAIN,KAAK,GAAG,YAAY,GAAGT;QAChD,CAAC;MACH;MAEA,IAAIA,SAAS,KAAK,YAAY,EAAE;QAC9B,MAAMiB,KAAK,GAAGtB,QAAQ,GAAGE,OAAO,GAC5BX,IAAI,CAAC8B,GAAG,CAACrB,QAAQ,GAAGO,QAAQ,EAAEL,OAAO,CAAC,GACtCX,IAAI,CAACgC,GAAG,CAACvB,QAAQ,GAAGO,QAAQ,EAAEL,OAAO,CAAC;QAE1C,OAAO;UACL,GAAGW,IAAI;UACPb,QAAQ,EAAEsB,KAAK;UACfjB,SAAS,EAAEiB,KAAK,KAAKpB,OAAO,GAAG,MAAM,GAAGG;QAC1C,CAAC;MACH;MAEA,OAAOQ,IAAI;IACb,CAAC;IAED,MAAMW,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAIC,iBAAiB,GAAG,IAAI;MAE5BrE,gBAAgB,CAAEsE,KAAK,IAAK;QAC1B,OAAOA,KAAK,CAACC,GAAG,CAAEd,IAAI,IAAK;UACzB,IAAIA,IAAI,CAACJ,SAAS,EAAE,OAAOI,IAAI,CAAC,CAAC;;UAEjC9C,GAAG,CAAC6D,WAAW,GAAGjB,MAAM,CAACe,KAAK,CAACG,OAAO,CAAChB,IAAI,CAAC,GAAGF,MAAM,CAACtB,MAAM,CAAC;UAC7DtB,GAAG,CAAC+D,SAAS,GAAG,CAAC;;UAEjB;UACA,MAAMC,WAAW,GAAGnB,UAAU,CAACC,IAAI,CAAC;;UAEpC;UACA,IAAIkB,WAAW,CAAC3B,QAAQ,IAAI2B,WAAW,CAACvB,IAAI,IAAIuB,WAAW,CAAC/B,QAAQ,KAAK+B,WAAW,CAACrB,QAAQ,EAAE;YAC7FqB,WAAW,CAACtB,SAAS,GAAG,IAAI;UAC9B,CAAC,MAAM;YACLgB,iBAAiB,GAAG,KAAK;UAC3B;;UAEA;UACA1D,GAAG,CAACiB,SAAS,CAAC,CAAC;UACfjB,GAAG,CAACkB,MAAM,CAAC4B,IAAI,CAACb,QAAQ,EAAEa,IAAI,CAACT,QAAQ,CAAC;UAExC,IAAI2B,WAAW,CAAC1B,SAAS,KAAK,MAAM,EAAE;YACpC,MAAMS,KAAK,GAAGzD,YAAY,CAAC0D,MAAM,CAACC,IAAI,IAAIA,IAAI,GAAGH,IAAI,CAACT,QAAQ,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIY,WAAW,CAACvB,IAAI;YAC5GzC,GAAG,CAACmB,MAAM,CAAC2B,IAAI,CAACb,QAAQ,EAAET,IAAI,CAAC8B,GAAG,CAACU,WAAW,CAAC3B,QAAQ,GAAGS,IAAI,CAACN,QAAQ,EAAEO,KAAK,CAAC,CAAC;UAClF,CAAC,MAAM,IAAIiB,WAAW,CAAC1B,SAAS,KAAK,YAAY,EAAE;YACjDtC,GAAG,CAACmB,MAAM,CAAC6C,WAAW,CAAC/B,QAAQ,EAAEa,IAAI,CAACT,QAAQ,CAAC;UACjD;UAEArC,GAAG,CAACoB,MAAM,CAAC,CAAC;UAEZ,OAAO4C,WAAW;QACpB,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACN,iBAAiB,EAAE;QACtBhE,gBAAgB,CAACK,OAAO,GAAGkE,qBAAqB,CAACR,OAAO,CAAC;MAC3D,CAAC,MAAM;QACLS,oBAAoB,CAACxE,gBAAgB,CAACK,OAAO,CAAC;MAChD;IACF,CAAC;IAEDL,gBAAgB,CAACK,OAAO,GAAGkE,qBAAqB,CAACR,OAAO,CAAC;IAEzD,OAAO,MAAM;MACXS,oBAAoB,CAACxE,gBAAgB,CAACK,OAAO,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACX,aAAa,EAAEI,YAAY,CAAC,CAAC;EAEjC,oBACEd,OAAA;IACEyF,GAAG,EAAEpF,SAAU;IACfC,KAAK,EAAEA,KAAM;IACbqB,MAAM,EAAE;EAAI;IAAA+D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN,CAAC;AAACzF,EAAA,CArLIH,MAAM;AAAA6F,EAAA,GAAN7F,MAAM;AAuLZ,eAAeA,MAAM;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}