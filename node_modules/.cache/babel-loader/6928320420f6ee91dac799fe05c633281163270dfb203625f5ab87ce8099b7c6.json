{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const [startYValues, setStartValues] = useState([]);\n  const [imgPositions, setImgPositions] = useState([]);\n  const [horizon, setHorizon] = useState([]);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const newImgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        newImgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    setImgPositions(newImgPositions);\n    const minHorizontalLines = data.length - 1;\n    const horizontalLineCount = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const horizontalLines = []; // 수평선 정보 저장\n\n    const newAnimatedPaths = [];\n    const newStartYValues = [];\n    for (let i = 0; i < horizontalLineCount; i++) {\n      const x1 = newImgPositions[i % newImgPositions.length];\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // Draw horizontal line\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n\n      // 수평선 정보를 객체 형태로 저장\n      horizontalLines.push({\n        startX: Math.round(x1),\n        endX: Math.round(x2),\n        y: Math.round(startY)\n      });\n      newStartYValues.push(startY);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          currentY: 0,\n          stepSize: 5,\n          horizontalStepSize: 5,\n          endY: ladderHeight,\n          completed: false,\n          initialX: Math.round(x1),\n          direction: 'down'\n        });\n      }\n    }\n\n    // 수평선 정보를 상태로 저장\n    setHorizon(horizontalLines);\n    setStartValues(newStartYValues);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      let allPathsCompleted = true;\n      setAnimatedPaths(prevPaths => prevPaths.map((path, index) => {\n        if (path.completed) return path;\n\n        // 각 path의 상태를 복사\n        let updatedPath = {\n          ...path\n        };\n        const {\n          currentX,\n          currentY,\n          direction,\n          stepSize,\n          horizontalStepSize,\n          targetX,\n          endY,\n          initialX,\n          y\n        } = updatedPath;\n\n        // 수직 및 수평 이동 로직\n\n        const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 3;\n        if (direction === 'down') {\n          // 수직 이동\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          updatedPath.currentY = Math.min(currentY + stepSize, nextY);\n          ctx.lineTo(currentX, updatedPath.currentY);\n          ctx.stroke();\n          const horizontalLineAtCurrentY = horizon.find(line => Math.abs(line.y - updatedPath.currentY) < stepSize);\n          if (horizontalLineAtCurrentY && currentX >= horizontalLineAtCurrentY.startX && currentX <= horizontalLineAtCurrentY.endX) {\n            updatedPath.direction = 'horizontal';\n          }\n        } else if (direction === 'horizontal') {\n          // 수평 이동\n          ctx.beginPath();\n          ctx.moveTo(currentX, updatedPath.currentY);\n          const nextX = currentX < targetX ? Math.min(currentX + horizontalStepSize, targetX) : Math.max(currentX - horizontalStepSize, targetX);\n          updatedPath.currentX = nextX;\n          ctx.lineTo(nextX, updatedPath.currentY);\n          ctx.stroke();\n\n          // 더 이상 이동할 수평선이 없다면 방향을 down으로 전환\n          const nextY = startYValues.filter(yVal => yVal > updatedPath.currentY).sort((a, b) => a - b)[0];\n          const hasHorizontalLineBelow = horizon.some(line => line.y === nextY && updatedPath.currentX >= line.startX && updatedPath.currentX <= line.endX);\n          if (!hasHorizontalLineBelow) {\n            updatedPath.direction = 'down';\n            updatedPath.currentX = initialX; // 초기 X로 복귀\n          }\n        }\n\n        // path 완료 여부 확인\n        if (updatedPath.currentY < endY) {\n          allPathsCompleted = false;\n        } else {\n          updatedPath.completed = true;\n        }\n        return updatedPath; // 각 path 업데이트 후 반환\n      }));\n      if (!allPathsCompleted) {\n        animationFrameId.current = requestAnimationFrame(animate);\n      } else {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n    animationFrameId.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, [animatedPaths, imgPositions, startYValues]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"glVK4g1I3WZnM8QDDVyVQdFJQjo=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","startYValues","setStartValues","imgPositions","setImgPositions","horizon","setHorizon","animationFrameId","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","newImgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLineCount","Math","ceil","random","horizontalLines","newAnimatedPaths","newStartYValues","i","x1","x2","startY","startX","round","endX","y","currentX","targetX","currentY","stepSize","horizontalStepSize","endY","completed","initialX","direction","colors","animate","allPathsCompleted","prevPaths","map","path","updatedPath","nextY","filter","yVal","sort","a","b","strokeStyle","lineWidth","min","horizontalLineAtCurrentY","find","line","abs","nextX","max","hasHorizontalLineBelow","some","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const [startYValues, setStartValues] = useState([]);\r\n  const [imgPositions, setImgPositions] = useState([]);\r\n  const [horizon,setHorizon] = useState([]);\r\n  const animationFrameId = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n  \r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n  \r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n  \r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  \r\n    const newImgPositions = [];\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        newImgPositions.push(imgX);\r\n  \r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n  \r\n    setImgPositions(newImgPositions);\r\n  \r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLineCount = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n    \r\n    const horizontalLines = []; // 수평선 정보 저장\r\n  \r\n    const newAnimatedPaths = [];\r\n    const newStartYValues = [];\r\n    \r\n    for (let i = 0; i < horizontalLineCount; i++) {\r\n      const x1 = newImgPositions[i % newImgPositions.length];\r\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n  \r\n      // Draw horizontal line\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n  \r\n      // 수평선 정보를 객체 형태로 저장\r\n      horizontalLines.push({\r\n        startX: Math.round(x1),\r\n        endX: Math.round(x2),\r\n        y: Math.round(startY)\r\n      });\r\n  \r\n      newStartYValues.push(startY);\r\n  \r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          currentY: 0,\r\n          stepSize: 5,\r\n          horizontalStepSize: 5,\r\n          endY: ladderHeight,\r\n          completed: false,\r\n          initialX: Math.round(x1),\r\n          direction: 'down',\r\n        });\r\n      }\r\n    }\r\n  \r\n    // 수평선 정보를 상태로 저장\r\n    setHorizon(horizontalLines);\r\n    setStartValues(newStartYValues);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs.current]);\r\n  \r\n  \r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n      let allPathsCompleted = true;\r\n    \r\n      setAnimatedPaths((prevPaths) =>\r\n        prevPaths.map((path, index) => {\r\n          if (path.completed) return path;\r\n    \r\n          // 각 path의 상태를 복사\r\n          let updatedPath = { ...path };\r\n          const { currentX, currentY, direction, stepSize, horizontalStepSize, targetX, endY, initialX,y } = updatedPath;\r\n    \r\n          // 수직 및 수평 이동 로직\r\n         \r\n          const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\r\n\r\n          ctx.strokeStyle = colors[index % colors.length];\r\n          ctx.lineWidth = 3;\r\n          \r\n          if (direction === 'down' ) {\r\n            // 수직 이동\r\n            ctx.beginPath();\r\n            ctx.moveTo(currentX, currentY);\r\n            \r\n            updatedPath.currentY = Math.min(currentY + stepSize, nextY);\r\n            ctx.lineTo(currentX, updatedPath.currentY);\r\n            ctx.stroke();\r\n    \r\n            const horizontalLineAtCurrentY = horizon.find(\r\n              line => Math.abs(line.y - updatedPath.currentY) < stepSize\r\n            );\r\n        if (horizontalLineAtCurrentY && currentX >= horizontalLineAtCurrentY.startX && currentX <= horizontalLineAtCurrentY.endX) {\r\n         \r\n            updatedPath.direction = 'horizontal'; \r\n           \r\n        }\r\n          } else if (direction === 'horizontal') {\r\n            // 수평 이동\r\n            ctx.beginPath();\r\n            ctx.moveTo(currentX, updatedPath.currentY);\r\n          \r\n            const nextX = currentX < targetX\r\n              ? Math.min(currentX + horizontalStepSize, targetX)\r\n              : Math.max(currentX - horizontalStepSize, targetX);\r\n          \r\n            updatedPath.currentX = nextX;\r\n            ctx.lineTo(nextX, updatedPath.currentY);\r\n            ctx.stroke();\r\n          \r\n            // 더 이상 이동할 수평선이 없다면 방향을 down으로 전환\r\n            const nextY = startYValues.filter(yVal => yVal > updatedPath.currentY).sort((a, b) => a - b)[0];\r\n            const hasHorizontalLineBelow = horizon.some(\r\n              line => line.y === nextY && updatedPath.currentX >= line.startX && updatedPath.currentX <= line.endX\r\n            );\r\n          \r\n            if (!hasHorizontalLineBelow) {\r\n              updatedPath.direction = 'down';\r\n              updatedPath.currentX = initialX; // 초기 X로 복귀\r\n            }\r\n          }\r\n    \r\n          // path 완료 여부 확인\r\n          if (updatedPath.currentY < endY) {\r\n            allPathsCompleted = false;\r\n          } else {\r\n            updatedPath.completed = true;\r\n          }\r\n    \r\n          return updatedPath; // 각 path 업데이트 후 반환\r\n        })\r\n      );\r\n    \r\n      if (!allPathsCompleted) {\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n      } else {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n    \r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    };\r\n  }, [animatedPaths, imgPositions, startYValues]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}