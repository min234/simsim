{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const {\n    data\n  } = useSelector(state => state.data);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderWidth = canvas.width;\n    const ladderHeight = canvas.height;\n    const numPlayers = data.length;\n    const stepWidth = ladderWidth / (numPlayers + 1);\n\n    // Clear the canvas before drawing\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\n\n    // Draw vertical lines and count them\n    let lineCount = 0;\n    for (let i = 0; i <= numPlayers; i++) {\n      const lineX = i * stepWidth;\n      ctx.beginPath();\n      ctx.moveTo(lineX, 0); // Start at the top of the canvas\n      ctx.lineTo(lineX, ladderHeight); // End at the bottom of the canvas\n      ctx.strokeStyle = '#000'; // Line color\n      ctx.lineWidth = 2; // Line width\n      ctx.stroke();\n      lineCount++; // Increment the line count\n    }\n\n    // Draw the line count on the canvas\n    ctx.font = '16px Arial';\n    ctx.fillStyle = 'black';\n    ctx.fillText(`Number of lines: ${lineCount}`, 10, 20);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1600,\n    height: 400,\n    style: {\n      border: '1px solid #000'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"Gyk9anlv5LnyUXpBoFKI+V8whY4=\", false, function () {\n  return [useSelector];\n});\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useSelector","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","data","state","canvas","current","ctx","getContext","ladderWidth","width","ladderHeight","height","numPlayers","length","stepWidth","clearRect","lineCount","i","lineX","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","font","fillStyle","fillText","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Canvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const { data } = useSelector((state) => state.data);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    if (!ctx) return;\r\n\r\n    const ladderWidth = canvas.width;\r\n    const ladderHeight = canvas.height;\r\n    const numPlayers = data.length;\r\n    const stepWidth = ladderWidth / (numPlayers + 1);\r\n\r\n    // Clear the canvas before drawing\r\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\r\n\r\n    // Draw vertical lines and count them\r\n    let lineCount = 0;\r\n\r\n    for (let i = 0; i <= numPlayers; i++) {\r\n      const lineX = i * stepWidth;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(lineX, 0); // Start at the top of the canvas\r\n      ctx.lineTo(lineX, ladderHeight); // End at the bottom of the canvas\r\n      ctx.strokeStyle = '#000'; // Line color\r\n      ctx.lineWidth = 2; // Line width\r\n      ctx.stroke();\r\n      \r\n      lineCount++; // Increment the line count\r\n    }\r\n\r\n    // Draw the line count on the canvas\r\n    ctx.font = '16px Arial';\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText(`Number of lines: ${lineCount}`, 10, 20);\r\n\r\n  }, [data]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={1600}\r\n      height={400}\r\n      style={{ border: '1px solid #000' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM;IAAEQ;EAAK,CAAC,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACD,IAAI,CAAC;EAEnDP,SAAS,CAAC,MAAM;IACd,MAAMS,MAAM,GAAGH,SAAS,CAACI,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,WAAW,GAAGJ,MAAM,CAACK,KAAK;IAChC,MAAMC,YAAY,GAAGN,MAAM,CAACO,MAAM;IAClC,MAAMC,UAAU,GAAGV,IAAI,CAACW,MAAM;IAC9B,MAAMC,SAAS,GAAGN,WAAW,IAAII,UAAU,GAAG,CAAC,CAAC;;IAEhD;IACAN,GAAG,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,WAAW,EAAEE,YAAY,CAAC;;IAE9C;IACA,IAAIM,SAAS,GAAG,CAAC;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,UAAU,EAAEK,CAAC,EAAE,EAAE;MACpC,MAAMC,KAAK,GAAGD,CAAC,GAAGH,SAAS;MAE3BR,GAAG,CAACa,SAAS,CAAC,CAAC;MACfb,GAAG,CAACc,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;MACtBZ,GAAG,CAACe,MAAM,CAACH,KAAK,EAAER,YAAY,CAAC,CAAC,CAAC;MACjCJ,GAAG,CAACgB,WAAW,GAAG,MAAM,CAAC,CAAC;MAC1BhB,GAAG,CAACiB,SAAS,GAAG,CAAC,CAAC,CAAC;MACnBjB,GAAG,CAACkB,MAAM,CAAC,CAAC;MAEZR,SAAS,EAAE,CAAC,CAAC;IACf;;IAEA;IACAV,GAAG,CAACmB,IAAI,GAAG,YAAY;IACvBnB,GAAG,CAACoB,SAAS,GAAG,OAAO;IACvBpB,GAAG,CAACqB,QAAQ,CAAC,oBAAoBX,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAEvD,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEV,oBACEJ,OAAA;IACE8B,GAAG,EAAE3B,SAAU;IACfQ,KAAK,EAAE,IAAK;IACZE,MAAM,EAAE,GAAI;IACZkB,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAiB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEN,CAAC;AAAClC,EAAA,CAjDID,MAAM;EAAA,QAEOH,WAAW;AAAA;AAAAuC,EAAA,GAFxBpC,MAAM;AAmDZ,eAAeA,MAAM;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}