{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [positions, setPositions] = useState([]);\n  const [firstX, setFirstX] = useState(null);\n  const [secondX, setSecondX] = useState(null);\n  const [animationFrameId, setAnimationFrameId] = useState(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      const containerWidth = document.querySelector('.contetnt').offsetWidth;\n      setWidth(containerWidth);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderWidth = canvas.width;\n    const ladderHeight = canvas.height;\n    const numPlayers = data.length;\n    const stepHeight = ladderHeight / (numPlayers + 3);\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 5;\n    let firstXTemp = null;\n    let secondXTemp = null;\n\n    // 수직선 그리기\n    data.forEach((_, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\n        if (firstXTemp === null) {\n          firstXTemp = imgX; // 첫 번째 수직선의 X 좌표 저장\n        } else if (secondXTemp === null) {\n          secondXTemp = imgX; // 두 번째 수직선의 X 좌표 저장\n        }\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    if (firstXTemp !== null && secondXTemp !== null) {\n      setFirstX(firstXTemp);\n      setSecondX(secondXTemp);\n    }\n    const midX = firstX && secondX ? (firstX + secondX) / 2 : null;\n    ctx.strokeStyle = '#000';\n    ctx.lineWidth = 5;\n\n    // 수평선 그리기\n    lines.forEach(line => {\n      ctx.beginPath();\n      if (midX !== null) {\n        ctx.moveTo(line.x, line.y); // 수평선의 시작점은 imgX (line.x)\n        ctx.lineTo(midX, line.y); // 수평선의 끝점은 midX\n      } else {\n        // 중간 X 값이 없는 경우\n        ctx.moveTo(line.x * (ladderWidth / width), line.y);\n        ctx.lineTo(ladderWidth, line.y);\n      }\n      ctx.stroke();\n    });\n\n    // 데이터의 현재 위치를 그림\n    positions.forEach(pos => {\n      ctx.beginPath();\n      ctx.arc(pos.x, pos.y, 5, 0, Math.PI * 2);\n      ctx.fillStyle = 'red';\n      ctx.fill();\n    });\n  }, [data, imgRefs, width, lines, positions]);\n  useEffect(() => {\n    const numPlayers = data.length;\n    const ladderHeight = 600;\n    const stepHeight = ladderHeight / (numPlayers + 3);\n    const newLines = [];\n    for (let i = 0; i < numPlayers + 4; i++) {\n      const lineY = Math.min((i + 1) * stepHeight, 580);\n      if (Math.random() > 0.5) {\n        data.forEach((_, index) => {\n          const img = imgRefs.current[index];\n          if (img) {\n            const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\n            newLines.push({\n              x: imgX,\n              y: lineY\n            });\n          }\n        });\n      }\n    }\n    setLines(newLines);\n\n    // 초기 데이터 위치 설정\n    const initialPositions = data.map((_, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\n        return {\n          x: imgX,\n          y: 0\n        };\n      }\n      return {\n        x: 0,\n        y: 0\n      };\n    });\n    setPositions(initialPositions);\n  }, [data, imgRefs]);\n  useEffect(() => {\n    const animate = () => {\n      setPositions(prevPositions => prevPositions.map(pos => {\n        const nextY = pos.y + 1; // 이동할 Y 값\n        if (nextY > 600) return {\n          ...pos,\n          y: 0\n        }; // 화면을 벗어나면 위로 리셋\n        return {\n          ...pos,\n          y: nextY\n        };\n      }));\n      setAnimationFrameId(requestAnimationFrame(animate));\n    };\n    const id = requestAnimationFrame(animate);\n    setAnimationFrameId(id);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [positions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"D6IA8vuvhYq9N0h0w+SQSOymIuQ=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","lines","setLines","positions","setPositions","firstX","setFirstX","secondX","setSecondX","animationFrameId","setAnimationFrameId","updateCanvasSize","containerWidth","document","querySelector","offsetWidth","window","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderWidth","ladderHeight","height","numPlayers","length","stepHeight","clearRect","strokeStyle","lineWidth","firstXTemp","secondXTemp","forEach","_","index","img","imgX","offsetLeft","beginPath","moveTo","lineTo","stroke","midX","line","x","y","pos","arc","Math","PI","fillStyle","fill","newLines","i","lineY","min","random","push","initialPositions","map","animate","prevPositions","nextY","requestAnimationFrame","id","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(0);\r\n  const [lines, setLines] = useState([]);\r\n  const [positions, setPositions] = useState([]);\r\n  const [firstX, setFirstX] = useState(null);\r\n  const [secondX, setSecondX] = useState(null);\r\n  const [animationFrameId, setAnimationFrameId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      const containerWidth = document.querySelector('.contetnt').offsetWidth;\r\n      setWidth(containerWidth);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    if (!ctx) return;\r\n\r\n    const ladderWidth = canvas.width;\r\n    const ladderHeight = canvas.height;\r\n    const numPlayers = data.length;\r\n    const stepHeight = ladderHeight / (numPlayers + 3);\r\n\r\n    ctx.clearRect(0, 0, ladderWidth, ladderHeight);\r\n\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 5;\r\n\r\n    let firstXTemp = null;\r\n    let secondXTemp = null;\r\n\r\n    // 수직선 그리기\r\n    data.forEach((_, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\r\n        if (firstXTemp === null) {\r\n          firstXTemp = imgX; // 첫 번째 수직선의 X 좌표 저장\r\n        } else if (secondXTemp === null) {\r\n          secondXTemp = imgX; // 두 번째 수직선의 X 좌표 저장\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    if (firstXTemp !== null && secondXTemp !== null) {\r\n      setFirstX(firstXTemp);\r\n      setSecondX(secondXTemp);\r\n    }\r\n\r\n    const midX = (firstX && secondX) ? (firstX + secondX) / 2 : null;\r\n\r\n    ctx.strokeStyle = '#000';\r\n    ctx.lineWidth = 5;\r\n\r\n    // 수평선 그리기\r\n    lines.forEach((line) => {\r\n      ctx.beginPath();\r\n      if (midX !== null) {\r\n        ctx.moveTo(line.x, line.y); // 수평선의 시작점은 imgX (line.x)\r\n        ctx.lineTo(midX, line.y);   // 수평선의 끝점은 midX\r\n      } else {\r\n        // 중간 X 값이 없는 경우\r\n        ctx.moveTo(line.x * (ladderWidth / width), line.y);\r\n        ctx.lineTo(ladderWidth, line.y);\r\n      }\r\n      ctx.stroke();\r\n    });\r\n\r\n    // 데이터의 현재 위치를 그림\r\n    positions.forEach((pos) => {\r\n      ctx.beginPath();\r\n      ctx.arc(pos.x, pos.y, 5, 0, Math.PI * 2);\r\n      ctx.fillStyle = 'red';\r\n      ctx.fill();\r\n    });\r\n  }, [data, imgRefs, width, lines, positions]);\r\n\r\n  useEffect(() => {\r\n    const numPlayers = data.length;\r\n    const ladderHeight = 600;\r\n    const stepHeight = ladderHeight / (numPlayers + 3);\r\n\r\n    const newLines = [];\r\n\r\n    for (let i = 0; i < numPlayers + 4; i++) {\r\n      const lineY = Math.min((i + 1) * stepHeight, 580);\r\n      if (Math.random() > 0.5) {\r\n        data.forEach((_, index) => {\r\n          const img = imgRefs.current[index];\r\n          if (img) {\r\n            const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\r\n            newLines.push({ x: imgX, y: lineY });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    setLines(newLines);\r\n\r\n    // 초기 데이터 위치 설정\r\n    const initialPositions = data.map((_, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const imgX = img.offsetLeft + img.width / 2; // 중앙을 기준으로 X 위치 계산\r\n        return { x: imgX, y: 0 };\r\n      }\r\n      return { x: 0, y: 0 };\r\n    });\r\n\r\n    setPositions(initialPositions);\r\n  }, [data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      setPositions((prevPositions) =>\r\n        prevPositions.map((pos) => {\r\n          const nextY = pos.y + 1; // 이동할 Y 값\r\n          if (nextY > 600) return { ...pos, y: 0 }; // 화면을 벗어나면 위로 리셋\r\n          return { ...pos, y: nextY };\r\n        })\r\n      );\r\n\r\n      setAnimationFrameId(requestAnimationFrame(animate));\r\n    };\r\n\r\n    const id = requestAnimationFrame(animate);\r\n    setAnimationFrameId(id);\r\n\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [positions]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}