{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [paths, setPaths] = useState([]);\n  const [movingLine, setMovingLine] = useState(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const player = data.length;\n    const ladderY = 50;\n    const ladderX = 100;\n    const columnGap = (canvas.width - ladderX * 2) / (player - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw vertical lines\n    const imgPositions = [];\n    data.forEach((_, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n        ctx.beginPath();\n        ctx.moveTo(imgX, ladderY);\n        ctx.lineTo(imgX, ladderY + ladderHeight);\n        ctx.stroke();\n      }\n    });\n\n    // Draw horizontal lines\n    const minHorizontalLines = player - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newPaths = Array.from({\n      length: player\n    }, () => []);\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      newPaths[imgPositions.indexOf(x1)].push({\n        coord: {\n          startX: x1,\n          endX: x2,\n          y: startY\n        },\n        connectedIndex: {\n          vertical: imgPositions.indexOf(x2)\n        }\n      });\n    }\n    setPaths(newPaths);\n  }, [data, imgRefs]);\n  const showResult = useCallback(startPoint => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"red\";\n    const userIndex = startPoint - 1;\n    const path = paths[userIndex];\n    if (path.length === 0) return;\n    let prevX = imgRefs.current[userIndex].getBoundingClientRect().left - canvas.getBoundingClientRect().left + imgRefs.current[userIndex].width / 2;\n    let prevY = 50;\n    const animatePath = () => {\n      if (movingLine) {\n        requestAnimationFrame(animatePath);\n      }\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous path\n      ctx.strokeStyle = \"black\";\n      redrawLadder(); // Redraw the ladder\n\n      let nextLine = path[0];\n      let t = 0;\n      while (nextLine) {\n        var _paths$nextLine$conne;\n        ++t;\n        if (t >= 1000) break; // Protect against infinite loops\n\n        const {\n          startX,\n          endX,\n          y\n        } = nextLine.coord;\n\n        // Draw vertical path\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(prevX, y);\n        ctx.stroke();\n\n        // Draw horizontal path\n        ctx.beginPath();\n        ctx.moveTo(startX, y);\n        ctx.lineTo(endX, y);\n        ctx.stroke();\n        const nextLineIndex = paths[nextLine.connectedIndex.vertical].findIndex(({\n          coord\n        }) => coord.startX === endX && coord.endX === startX && coord.y === y);\n        const tempNextLine = (_paths$nextLine$conne = paths[nextLine.connectedIndex.vertical]) === null || _paths$nextLine$conne === void 0 ? void 0 : _paths$nextLine$conne[nextLineIndex + 1];\n        if (tempNextLine && nextLineIndex !== -1) {\n          nextLine = tempNextLine;\n          prevX = endX;\n          prevY = y;\n        } else {\n          // Draw vertical line to the bottom of the canvas if no more horizontal lines\n          ctx.beginPath();\n          ctx.moveTo(endX, y);\n          ctx.lineTo(endX, 50 + 600);\n          ctx.stroke();\n          break;\n        }\n      }\n      setMovingLine(nextLine);\n    };\n    setMovingLine(null);\n    animatePath();\n  }, [paths, imgRefs, movingLine]);\n  const redrawLadder = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const player = data.length;\n    const ladderY = 50;\n    const ladderX = 100;\n    const columnGap = (canvas.width - ladderX * 2) / (player - 1);\n    ctx.strokeStyle = \"black\";\n\n    // Redraw vertical lines\n    data.forEach((_, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        ctx.beginPath();\n        ctx.moveTo(imgX, ladderY);\n        ctx.lineTo(imgX, ladderY + ladderHeight);\n        ctx.stroke();\n      }\n    });\n\n    // Redraw horizontal lines\n    const minHorizontalLines = player - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const imgPositions = [];\n    data.forEach((_, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n      }\n    });\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600,\n    onClick: e => {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const userIndex = Math.floor((x - 100) / (width - 200) * (data.length - 1)) + 1;\n      showResult(userIndex);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"p9OR1Tl2xsWVnW/JSSxEwtqqFPE=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","paths","setPaths","movingLine","setMovingLine","canvas","current","ctx","getContext","ladderHeight","player","length","ladderY","ladderX","columnGap","width","clearRect","height","imgPositions","forEach","_","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","horizontalLines","Math","ceil","random","newPaths","Array","from","i","x1","x2","startY","indexOf","coord","startX","endX","y","connectedIndex","vertical","showResult","startPoint","lineWidth","strokeStyle","userIndex","path","prevX","prevY","animatePath","requestAnimationFrame","redrawLadder","nextLine","t","_paths$nextLine$conne","nextLineIndex","findIndex","tempNextLine","ref","onClick","e","x","clientX","floor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [paths, setPaths] = useState([]);\r\n  const [movingLine, setMovingLine] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const player = data.length;\r\n    const ladderY = 50;\r\n    const ladderX = 100;\r\n    const columnGap = (canvas.width - ladderX * 2) / (player - 1);\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw vertical lines\r\n    const imgPositions = [];\r\n    data.forEach((_, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, ladderY);\r\n        ctx.lineTo(imgX, ladderY + ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    // Draw horizontal lines\r\n    const minHorizontalLines = player - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n    const newPaths = Array.from({ length: player }, () => []);\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n\r\n      newPaths[imgPositions.indexOf(x1)].push({\r\n        coord: { startX: x1, endX: x2, y: startY },\r\n        connectedIndex: { vertical: imgPositions.indexOf(x2) }\r\n      });\r\n    }\r\n\r\n    setPaths(newPaths);\r\n  }, [data, imgRefs]);\r\n\r\n  const showResult = useCallback((startPoint) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    ctx.lineWidth = 5;\r\n    ctx.strokeStyle = \"red\";\r\n\r\n    const userIndex = startPoint - 1;\r\n    const path = paths[userIndex];\r\n\r\n    if (path.length === 0) return;\r\n\r\n    let prevX = imgRefs.current[userIndex].getBoundingClientRect().left - canvas.getBoundingClientRect().left + imgRefs.current[userIndex].width / 2;\r\n    let prevY = 50;\r\n\r\n    const animatePath = () => {\r\n      if (movingLine) {\r\n        requestAnimationFrame(animatePath);\r\n      }\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous path\r\n      ctx.strokeStyle = \"black\";\r\n      redrawLadder(); // Redraw the ladder\r\n\r\n      let nextLine = path[0];\r\n      let t = 0;\r\n\r\n      while (nextLine) {\r\n        ++t;\r\n        if (t >= 1000) break; // Protect against infinite loops\r\n\r\n        const { startX, endX, y } = nextLine.coord;\r\n\r\n        // Draw vertical path\r\n        ctx.beginPath();\r\n        ctx.moveTo(prevX, prevY);\r\n        ctx.lineTo(prevX, y);\r\n        ctx.stroke();\r\n\r\n        // Draw horizontal path\r\n        ctx.beginPath();\r\n        ctx.moveTo(startX, y);\r\n        ctx.lineTo(endX, y);\r\n        ctx.stroke();\r\n\r\n        const nextLineIndex = paths[nextLine.connectedIndex.vertical].findIndex(\r\n          ({ coord }) =>\r\n            coord.startX === endX && coord.endX === startX && coord.y === y\r\n        );\r\n\r\n        const tempNextLine = paths[nextLine.connectedIndex.vertical]?.[nextLineIndex + 1];\r\n\r\n        if (tempNextLine && nextLineIndex !== -1) {\r\n          nextLine = tempNextLine;\r\n          prevX = endX;\r\n          prevY = y;\r\n        } else {\r\n          // Draw vertical line to the bottom of the canvas if no more horizontal lines\r\n          ctx.beginPath();\r\n          ctx.moveTo(endX, y);\r\n          ctx.lineTo(endX, 50 + 600);\r\n          ctx.stroke();\r\n          break;\r\n        }\r\n      }\r\n\r\n      setMovingLine(nextLine);\r\n    };\r\n\r\n    setMovingLine(null);\r\n    animatePath();\r\n  }, [paths, imgRefs, movingLine]);\r\n\r\n  const redrawLadder = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const player = data.length;\r\n    const ladderY = 50;\r\n    const ladderX = 100;\r\n    const columnGap = (canvas.width - ladderX * 2) / (player - 1);\r\n\r\n    ctx.strokeStyle = \"black\";\r\n\r\n    // Redraw vertical lines\r\n    data.forEach((_, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, ladderY);\r\n        ctx.lineTo(imgX, ladderY + ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    // Redraw horizontal lines\r\n    const minHorizontalLines = player - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((_, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n      }\r\n    });\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n      onClick={(e) => {\r\n        const rect = canvasRef.current.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const userIndex = Math.floor((x - 100) / (width - 200) * (data.length - 1)) + 1;\r\n        showResult(userIndex);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}