{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n\n  // `sRef`를 useRef로 정의하여 애니메이션 루프 내에서 값을 지속적으로 업데이트\n  const sRef = useRef([]);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n\n    // 초기 선 그리기\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n\n        // 수직선 그리기\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const newSValues = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n\n      // 초기 s 값을 저장하기 위해 newSValues 배열 사용\n      newSValues.push(10);\n      newAnimatedPaths.push({\n        startX: Math.round(x1),\n        currentX: Math.round(x1),\n        targetX: Math.round(x2),\n        y: Math.round(startY),\n        sIndex: i,\n        currentY: 0,\n        direction: 'down',\n        // 수직 이동 시작\n        horizontalStepSize: 5,\n        stepSize: 5,\n        // 수직 애니메이션 속도\n        horizontalDirection: x2 > x1 ? 'right' : 'left'\n      });\n    }\n\n    // sRef에 초기 s 값을 설정\n    sRef.current = newSValues;\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      animatedPaths.forEach((path, index) => {\n        const {\n          currentX,\n          currentY,\n          y,\n          direction,\n          stepSize,\n          sIndex,\n          horizontalDirection,\n          targetX,\n          horizontalStepSize\n        } = path;\n        const s = sRef.current[sIndex]; // 현재 s 값을 가져오기\n\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 2;\n        if (direction === 'down') {\n          const endY = Math.min(currentY + stepSize, s);\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          ctx.lineTo(currentX, endY);\n          ctx.stroke();\n          if (currentY < endY) {\n            path.currentY = endY;\n          } else if (currentY === endY) {\n            path.currentY = endY;\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\n            path.currentX = currentX;\n          }\n        } else if (direction === 'horizontal') {\n          const step = horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize;\n          ctx.beginPath();\n          ctx.moveTo(currentX, y);\n          ctx.lineTo(currentX + step, y);\n          ctx.stroke();\n          if (horizontalDirection === 'right') {\n            if (currentX < targetX) {\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\n            } else if (currentX >= targetX) {\n              path.direction = 'down';\n              path.currentY = y;\n              sRef.current[sIndex] = Math.min(sRef.current[sIndex] + stepSize, 600); // s 값을 증가\n            }\n          } else if (horizontalDirection === 'left') {\n            if (currentX > targetX) {\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\n            } else if (currentX <= targetX) {\n              path.direction = 'down';\n              path.currentY = y;\n              sRef.current[sIndex] = Math.min(sRef.current[sIndex] + stepSize, 600); // s 값을 증가\n            }\n          }\n        }\n      });\n      requestAnimationFrame(animate);\n    };\n    animate();\n  }, [animatedPaths]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"xY+l1lbCAl7g126qegAYTYQeVIo=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","sRef","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","imgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","newSValues","i","x1","x2","startY","startX","round","currentX","targetX","y","sIndex","currentY","direction","horizontalStepSize","stepSize","horizontalDirection","colors","animate","path","s","strokeStyle","lineWidth","endY","min","step","max","requestAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n\r\n  // `sRef`를 useRef로 정의하여 애니메이션 루프 내에서 값을 지속적으로 업데이트\r\n  const sRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    // 초기 선 그리기\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX);\r\n\r\n        // 수직선 그리기\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const newSValues = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n\r\n      // 초기 s 값을 저장하기 위해 newSValues 배열 사용\r\n      newSValues.push(10);\r\n\r\n      newAnimatedPaths.push({\r\n        startX: Math.round(x1),\r\n        currentX: Math.round(x1),\r\n        targetX: Math.round(x2),\r\n        y: Math.round(startY),\r\n        sIndex: i,\r\n        currentY: 0,\r\n        direction: 'down', // 수직 이동 시작\r\n        horizontalStepSize: 5,\r\n        stepSize: 5, // 수직 애니메이션 속도\r\n        horizontalDirection: x2 > x1 ? 'right' : 'left'\r\n      });\r\n    }\r\n\r\n    // sRef에 초기 s 값을 설정\r\n    sRef.current = newSValues;\r\n\r\n    setAnimatedPaths(newAnimatedPaths);\r\n\r\n  }, [width, data, imgRefs]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n      animatedPaths.forEach((path, index) => {\r\n        const { currentX, currentY, y, direction, stepSize, sIndex, horizontalDirection, targetX, horizontalStepSize } = path;\r\n        const s = sRef.current[sIndex]; // 현재 s 값을 가져오기\r\n\r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 2;\r\n\r\n        if (direction === 'down') {\r\n          const endY = Math.min(currentY + stepSize, s);\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          ctx.lineTo(currentX, endY);\r\n          ctx.stroke();\r\n\r\n          if (currentY < endY) {\r\n            path.currentY = endY;\r\n          } else if (currentY === endY) {\r\n            path.currentY = endY;\r\n            path.direction = 'horizontal'; // 수직 이동 완료 후 수평 이동 준비\r\n            path.currentX = currentX;\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          const step = horizontalDirection === 'right' ? horizontalStepSize : -horizontalStepSize;\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, y);\r\n          ctx.lineTo(currentX + step, y);\r\n          ctx.stroke();\r\n\r\n          if (horizontalDirection === 'right') {\r\n            if (currentX < targetX) {\r\n              path.currentX = Math.min(currentX + horizontalStepSize, targetX);\r\n            } else if (currentX >= targetX) {\r\n              path.direction = 'down';\r\n              path.currentY = y;\r\n              sRef.current[sIndex] = Math.min(sRef.current[sIndex] + stepSize, 600); // s 값을 증가\r\n            }\r\n          } else if (horizontalDirection === 'left') {\r\n            if (currentX > targetX) {\r\n              path.currentX = Math.max(currentX - horizontalStepSize, targetX);\r\n            } else if (currentX <= targetX) {\r\n              path.direction = 'down';\r\n              path.currentY = y;\r\n              sRef.current[sIndex] = Math.min(sRef.current[sIndex] + stepSize, 600); // s 값을 증가\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n  }, [animatedPaths]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}