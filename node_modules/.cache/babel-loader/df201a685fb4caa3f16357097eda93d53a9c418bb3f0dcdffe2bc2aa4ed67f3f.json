{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Naver from './Navbar/index';\nimport Home from './Home/index';\nimport Memo from './Memo';\nimport Loading from './Loading';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const mainApi = async () => {\n    setLoading(true); // api 호출 전에 true로 변경하여 로딩화면 띄우기\n    try {\n      const response = await fetch(`api url`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify()\n      });\n      const result = await response.json();\n      console.log('mainData', result);\n      setLoading(false); // api 호출 완료 됐을 때 false로 변경하려 로딩화면 숨김처리\n    } catch (error) {\n      window.alert(error);\n    }\n  };\n  useEffect(() => {\n    mainApi();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(Naver, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/memo\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Message from Server:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/memo/*\",\n          element: /*#__PURE__*/_jsxDEV(Memo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kJ2TY16y+RP6xRiZ/f8+Ioxvgxs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Naver","Home","Memo","Loading","Routes","Route","Link","jsxDEV","_jsxDEV","App","_s","loading","setLoading","mainApi","response","fetch","method","headers","Accept","body","JSON","stringify","result","json","console","log","error","window","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","path","element","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/App.js"],"sourcesContent":["import './App.css';\nimport React ,{useState,useEffect}from 'react';\nimport Naver from './Navbar/index';\nimport Home from './Home/index';\nimport Memo from './Memo';\nimport Loading from './Loading';\nimport { Routes, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  const [loading,setLoading] = useState(true);\n  const mainApi = async () => {\n    setLoading(true); // api 호출 전에 true로 변경하여 로딩화면 띄우기\n  try {\n    const response = await fetch(`api url`, {\n    method: 'POST',\n    headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(),\n  });\n  \n  const result = await response.json();\n  console.log('mainData', result);\n  setLoading(false); // api 호출 완료 됐을 때 false로 변경하려 로딩화면 숨김처리\n  } catch (error) {\n  window.alert(error);\n  }\n  };\n  \n  useEffect(() => {\n  mainApi();\n  }, []);\n  \n  return (\n    <div className='header'>\n      <Naver />\n      {loading ?<Loading/>: null} \n      <div className='body'>\n        <Link to=\"/memo\"><h1>Message from Server:</h1></Link>\n        \n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/memo/*\" element={<Memo />} />\n          \n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}