{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [animatedPaths, setAnimatedPaths] = useState([]);\n  const [startYValues, setStartValues] = useState([]);\n  const [imgPositions, setImgPositions] = useState([]);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth - 100);\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const ladderY = 50;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const newImgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        newImgPositions.push(imgX);\n\n        // Draw vertical line\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    setImgPositions(newImgPositions);\n    const minHorizontalLines = data.length - 1;\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    const newAnimatedPaths = [];\n    const newStartYValues = [];\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = newImgPositions[i % newImgPositions.length];\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      // Draw horizontal line\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n      newStartYValues.push(startY);\n      if (newAnimatedPaths.length < data.length) {\n        newAnimatedPaths.push({\n          currentX: Math.round(x1),\n          targetX: Math.round(x2),\n          y: Math.round(startY),\n          currentY: 0,\n          stepSize: 5,\n          horizontalStepSize: 5,\n          endY: ladderHeight,\n          completed: false,\n          // 애니메이션 완료 상태 추가\n          initialX: Math.round(x1),\n          direction: 'down' // 초기 방향 설정\n        });\n      }\n    }\n    setStartValues(newStartYValues);\n    setAnimatedPaths(newAnimatedPaths);\n  }, [width, data, imgRefs.current]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\n    const animate = () => {\n      console.log(\"Animate called\");\n      let allPathsCompleted = true;\n      animatedPaths.forEach((path, index) => {\n        if (path.completed) return; // 이미 완료된 애니메이션은 건너뛰기\n\n        const {\n          currentX,\n          currentY,\n          direction,\n          stepSize,\n          horizontalStepSize,\n          targetX,\n          endY,\n          initialX\n        } = path;\n        ctx.strokeStyle = colors[index % colors.length];\n        ctx.lineWidth = 3;\n        if (direction === 'down') {\n          // 수직 이동\n          ctx.beginPath();\n          ctx.moveTo(currentX, currentY);\n          const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\n          path.currentY = Math.min(currentY + stepSize, nextY);\n          ctx.lineTo(currentX, path.currentY);\n          ctx.stroke();\n          if (path.currentY >= nextY) {\n            // 수직 이동 완료 후 방향 전환\n            path.direction = 'horizontal';\n          }\n        } else if (direction === 'horizontal') {\n          // 수평 이동\n          ctx.beginPath();\n          ctx.moveTo(currentX, path.currentY);\n\n          // Draw horizontal line\n          const nextX = currentX < targetX ? Math.min(currentX + horizontalStepSize, targetX) : Math.max(currentX - horizontalStepSize, targetX);\n          path.currentX = nextX;\n          ctx.lineTo(nextX, path.currentY);\n          ctx.stroke();\n          if (path.currentX === targetX) {\n            // 수평 이동 완료 후 방향 전환\n            path.direction = 'down';\n            path.currentX = initialX; // 초기 X로 이동\n          }\n        }\n\n        // 애니메이션이 완료된 상태로 업데이트\n        if (path.currentY < endY) {\n          allPathsCompleted = false;\n        } else {\n          path.completed = true;\n        }\n      });\n      if (!allPathsCompleted) {\n        animationFrameId.current = requestAnimationFrame(animate);\n      } else {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n    animationFrameId.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n    };\n  }, [animatedPaths, imgPositions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"fjH/QYOzPbD0g3+cpDuOyETnS9Y=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","animatedPaths","setAnimatedPaths","startYValues","setStartValues","imgPositions","setImgPositions","animationFrameId","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","ladderY","clearRect","height","newImgPositions","forEach","playerData","index","img","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","minHorizontalLines","length","horizontalLines","Math","ceil","random","newAnimatedPaths","newStartYValues","i","x1","x2","startY","currentX","round","targetX","y","currentY","stepSize","horizontalStepSize","endY","completed","initialX","direction","colors","animate","console","log","allPathsCompleted","path","strokeStyle","lineWidth","nextY","filter","yVal","sort","a","b","min","nextX","max","requestAnimationFrame","cancelAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth - 100);\r\n  const [animatedPaths, setAnimatedPaths] = useState([]);\r\n  const [startYValues, setStartValues] = useState([]);\r\n  const [imgPositions, setImgPositions] = useState([]);\r\n  const animationFrameId = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth - 100);\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const ladderHeight = 600;\r\n    const ladderY = 50;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const newImgPositions = [];\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        newImgPositions.push(imgX);\r\n\r\n        // Draw vertical line\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    setImgPositions(newImgPositions);\r\n  \r\n    const minHorizontalLines = data.length - 1;\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n\r\n    const newAnimatedPaths = [];\r\n    const newStartYValues = [];\r\n\r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = newImgPositions[i % newImgPositions.length];\r\n      const x2 = newImgPositions[(i + 1) % newImgPositions.length];\r\n      let startY = ladderY + Math.random() * ladderHeight;\r\n      // Draw horizontal line\r\n      ctx.beginPath();\r\n      ctx.moveTo(x1, startY);\r\n      ctx.lineTo(x2, startY);\r\n      ctx.stroke();\r\n      newStartYValues.push(startY);\r\n\r\n      if (newAnimatedPaths.length < data.length) {\r\n        newAnimatedPaths.push({\r\n          currentX: Math.round(x1),\r\n          targetX: Math.round(x2),\r\n          y: Math.round(startY),\r\n          currentY: 0,\r\n          stepSize: 5,\r\n          horizontalStepSize: 5,\r\n          endY: ladderHeight,\r\n          completed: false, // 애니메이션 완료 상태 추가\r\n          initialX: Math.round(x1),\r\n          direction: 'down', // 초기 방향 설정\r\n        });\r\n      }\r\n    }\r\n    setStartValues(newStartYValues);\r\n    setAnimatedPaths(newAnimatedPaths);\r\n  }, [width, data, imgRefs.current]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const colors = ['red', 'blue', 'green', 'orange', 'pink'];\r\n\r\n    const animate = () => {\r\n      console.log(\"Animate called\");\r\n      let allPathsCompleted = true;\r\n\r\n      animatedPaths.forEach((path, index) => {\r\n        if (path.completed) return; // 이미 완료된 애니메이션은 건너뛰기\r\n\r\n        const { currentX, currentY, direction, stepSize, horizontalStepSize, targetX, endY, initialX } = path;\r\n\r\n        ctx.strokeStyle = colors[index % colors.length];\r\n        ctx.lineWidth = 3;\r\n\r\n        if (direction === 'down') {\r\n          // 수직 이동\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, currentY);\r\n          const nextY = startYValues.filter(yVal => yVal > currentY).sort((a, b) => a - b)[0] || endY;\r\n          path.currentY = Math.min(currentY + stepSize, nextY);\r\n          ctx.lineTo(currentX, path.currentY);\r\n          ctx.stroke();\r\n\r\n          if (path.currentY >= nextY) {\r\n            // 수직 이동 완료 후 방향 전환\r\n            path.direction = 'horizontal';\r\n          }\r\n        } else if (direction === 'horizontal') {\r\n          // 수평 이동\r\n          ctx.beginPath();\r\n          ctx.moveTo(currentX, path.currentY);\r\n\r\n          // Draw horizontal line\r\n          const nextX = currentX < targetX\r\n            ? Math.min(currentX + horizontalStepSize, targetX)\r\n            : Math.max(currentX - horizontalStepSize, targetX);\r\n\r\n          path.currentX = nextX;\r\n          ctx.lineTo(nextX, path.currentY);\r\n          ctx.stroke();\r\n\r\n          if (path.currentX === targetX) {\r\n            // 수평 이동 완료 후 방향 전환\r\n            path.direction = 'down';\r\n            path.currentX = initialX; // 초기 X로 이동\r\n          }\r\n        }\r\n\r\n        // 애니메이션이 완료된 상태로 업데이트\r\n        if (path.currentY < endY ) {\r\n          allPathsCompleted = false;\r\n        } else {\r\n          path.completed = true;\r\n        }\r\n      });\r\n\r\n      if (!allPathsCompleted) {\r\n        animationFrameId.current = requestAnimationFrame(animate);\r\n      } else {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    };\r\n  }, [animatedPaths, imgPositions]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}