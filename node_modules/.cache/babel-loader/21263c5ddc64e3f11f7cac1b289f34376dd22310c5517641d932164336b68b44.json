{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\min\\\\Desktop\\\\\\uD1A0\\uD1A0\\\\front\\\\src\\\\Sadari\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  data,\n  imgRefs\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(window.innerWidth - 100);\n  const [paths, setPaths] = useState([]);\n  //window\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      setWidth(window.innerWidth); // 화면의 너비에 따라 canvas의 너비를 업데이트\n    };\n    window.addEventListener('resize', updateCanvasSize);\n    updateCanvasSize();\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, []);\n  //canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ladderHeight = 600;\n    const player = data.length;\n    const ladderY = 50;\n    const minHorizontalLines = player - 1;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const imgPositions = [];\n    data.forEach((playerData, index) => {\n      const img = imgRefs.current[index];\n      console.log(img);\n      if (img) {\n        const rect = img.getBoundingClientRect();\n        const canvasRect = canvas.getBoundingClientRect();\n        const imgX = rect.left - canvasRect.left + img.width / 2;\n        imgPositions.push(imgX);\n        ctx.beginPath();\n        ctx.moveTo(imgX, 0);\n        ctx.lineTo(imgX, ladderHeight);\n        ctx.stroke();\n      }\n    });\n    console.log(imgPositions);\n    setPaths([]);\n    const newPaths = [];\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\n    for (let i = 0; i < horizontalLines; i++) {\n      const x1 = imgPositions[i % imgPositions.length];\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\n      let startY = ladderY + Math.random() * ladderHeight;\n      newPaths.push({\n        x1,\n        x2,\n        y: startY\n      });\n      ctx.beginPath();\n      ctx.moveTo(x1, startY);\n      ctx.lineTo(x2, startY);\n      ctx.stroke();\n    }\n    setPaths(newPaths);\n  }, [width, data, imgRefs]);\n  //ani\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const animateImages = () => {\n      const images = imgRefs.current;\n      const newPositions = images.map((img, index) => {\n        if (img) {\n          const pathIndex = pathIndices[index] || 0;\n          const path = paths[pathIndex];\n          if (path) {\n            const speed = 2;\n            const currentPos = positions[index] || {\n              x: path.x1,\n              y: path.y\n            };\n            const nextPos = {\n              x: path.x2,\n              y: path.y\n            };\n            const dx = nextPos.x - currentPos.x;\n            const dy = nextPos.y - currentPos.y;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist < speed) {\n              const newPathIndex = (pathIndex + 1) % paths.length;\n              setPathIndices(prev => {\n                const newIndices = [...prev];\n                newIndices[index] = newPathIndex;\n                return newIndices;\n              });\n              return nextPos;\n            } else {\n              const ratio = speed / dist;\n              return {\n                x: currentPos.x + dx * ratio,\n                y: currentPos.y + dy * ratio\n              };\n            }\n          }\n        }\n        return {\n          x: 0,\n          y: 0\n        };\n      });\n      setPositions(newPositions);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      paths.forEach(({\n        x1,\n        x2,\n        y\n      }) => {\n        ctx.beginPath();\n        ctx.moveTo(x1, y);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n      });\n      images.forEach((img, index) => {\n        const {\n          x,\n          y\n        } = newPositions[index] || {\n          x: 0,\n          y: 0\n        };\n        ctx.drawImage(img, x - img.width / 2, y - img.height / 2);\n      });\n      requestAnimationFrame(animateImages);\n    };\n    animateImages();\n  }, [imgRefs, paths, positions, pathIndices]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"PE9hWkFRmzl0fPa4JYTdoRxt6TQ=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","data","imgRefs","_s","canvasRef","width","setWidth","window","innerWidth","paths","setPaths","updateCanvasSize","addEventListener","removeEventListener","canvas","current","ctx","getContext","ladderHeight","player","length","ladderY","minHorizontalLines","clearRect","height","imgPositions","forEach","playerData","index","img","console","log","rect","getBoundingClientRect","canvasRect","imgX","left","push","beginPath","moveTo","lineTo","stroke","newPaths","horizontalLines","Math","ceil","random","i","x1","x2","startY","y","animateImages","images","newPositions","map","pathIndex","pathIndices","path","speed","currentPos","positions","x","nextPos","dx","dy","dist","sqrt","newPathIndex","setPathIndices","prev","newIndices","ratio","setPositions","drawImage","requestAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/min/Desktop/토토/front/src/Sadari/Canvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst Canvas = ({ data, imgRefs }) => {\r\n  const canvasRef = useRef(null);\r\n  const [width, setWidth] = useState(window.innerWidth -100);\r\n  const [paths, setPaths] = useState([]);\r\n//window\r\n  useEffect(() => {\r\n    const updateCanvasSize = () => {\r\n      setWidth(window.innerWidth); // 화면의 너비에 따라 canvas의 너비를 업데이트\r\n    };\r\n\r\n    window.addEventListener('resize', updateCanvasSize);\r\n    updateCanvasSize();\r\n    return () => window.removeEventListener('resize', updateCanvasSize);\r\n  }, []);\r\n//canvas\r\n   useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n  \r\n    const ladderHeight = 600;\r\n    const player =data.length\r\n    const ladderY = 50;\r\n    \r\n    const minHorizontalLines = player - 1;\r\n   \r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    const imgPositions = [];\r\n\r\n    data.forEach((playerData, index) => {\r\n      const img = imgRefs.current[index];\r\n      console.log(img);\r\n      if (img) {\r\n        const rect = img.getBoundingClientRect();\r\n        const canvasRect = canvas.getBoundingClientRect();\r\n      \r\n        const imgX = rect.left - canvasRect.left + img.width / 2;\r\n        imgPositions.push(imgX)\r\n        ctx.beginPath();\r\n        ctx.moveTo(imgX, 0);\r\n        ctx.lineTo(imgX, ladderHeight);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n    console.log(imgPositions)\r\n    setPaths([]);\r\n    const newPaths = [];\r\n    const horizontalLines = minHorizontalLines + Math.ceil(Math.random() * 5);\r\n   \r\n    for (let i = 0; i < horizontalLines; i++) {\r\n      const x1 = imgPositions[i % imgPositions.length];\r\n      const x2 = imgPositions[(i + 1) % imgPositions.length];\r\n    \r\n       let startY = ladderY + Math.random() * ladderHeight;\r\n       newPaths.push({ x1, x2, y: startY });\r\n       ctx.beginPath();\r\n       ctx.moveTo(x1, startY);\r\n       ctx.lineTo(x2, startY);\r\n       ctx.stroke();\r\n    }\r\n    setPaths(newPaths);\r\n  }, [width, data, imgRefs]);\r\n  //ani\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const animateImages = () => {\r\n      const images = imgRefs.current;\r\n      const newPositions = images.map((img, index) => {\r\n        if (img) {\r\n          const pathIndex = pathIndices[index] || 0;\r\n          const path = paths[pathIndex];\r\n\r\n          if (path) {\r\n            const speed = 2;\r\n            const currentPos = positions[index] || { x: path.x1, y: path.y };\r\n            const nextPos = { x: path.x2, y: path.y };\r\n            const dx = nextPos.x - currentPos.x;\r\n            const dy = nextPos.y - currentPos.y;\r\n            const dist = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (dist < speed) {\r\n              const newPathIndex = (pathIndex + 1) % paths.length;\r\n              setPathIndices(prev => {\r\n                const newIndices = [...prev];\r\n                newIndices[index] = newPathIndex;\r\n                return newIndices;\r\n              });\r\n              return nextPos;\r\n            } else {\r\n              const ratio = speed / dist;\r\n              return {\r\n                x: currentPos.x + dx * ratio,\r\n                y: currentPos.y + dy * ratio\r\n              };\r\n            }\r\n          }\r\n        }\r\n        return { x: 0, y: 0 };\r\n      });\r\n\r\n      setPositions(newPositions);\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      paths.forEach(({ x1, x2, y }) => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y);\r\n        ctx.lineTo(x2, y);\r\n        ctx.stroke();\r\n      });\r\n\r\n      images.forEach((img, index) => {\r\n        const { x, y } = newPositions[index] || { x: 0, y: 0 };\r\n        ctx.drawImage(img, x - img.width / 2, y - img.height / 2);\r\n      });\r\n\r\n      requestAnimationFrame(animateImages);\r\n    };\r\n\r\n    animateImages();\r\n  }, [imgRefs, paths, positions, pathIndices]);\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={600}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}